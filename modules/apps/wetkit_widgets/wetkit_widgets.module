<?php

include_once('wetkit_widgets.features.inc');
include_once('wetkit_widgets.plugins.inc');

/**
 * Implements hook_apps_app_info()
 */
function wetkit_widgets_apps_app_info() {
  return array(
    'configure form' => 'wetkit_widgets_configure_form',
  );
}

/**
 * Configuration Form for WetKit Magic
 */
function wetkit_widgets_configure_form($form, &$form_state) {
  $form = array();

  //$form['wetkit_widgets_spotlight_rotation_time'] = array(
  //  '#title' => t('Spotlight Rotation Time'),
  //  '#type' => 'textfield',   
  //  '#required' => TRUE,
  //  '#default_value' => variable_get('wetkit_widgets_spotlight_rotation_time', 4),
  //  '#description' => t('How many seconds do you want between rotations of the spotlight widget?'),
  //);

  return system_settings_form($form);
}

/**
 * Implements hook_init()
 */
function wetkit_widgets_init() {

  // Include the Spotlight Rotation time setting
  //$rotation_time = 1000 * variable_get('wetkit_widgets_spotlight_rotation_time', 4);
  //$js_variables = array('spotlight_settings' => array('rotation_time' => $rotation_time));
  //drupal_add_js($js_variables, 'setting');

}
    
/**
 * Implementation of hook_ctools_plugin_directory()
 */
function wetkit_widgets_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implementation of hook_ctools_content_subtype_alter()
 */
function wetkit_widgets_ctools_content_subtype_alter(&$subtype, &$plugin) {

}

/**
 * Implementation of hook_form_alter()
 */
function wetkit_widgets_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {

    // Quick modification to get the tabbed interface to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_tabbed_interface'])) {
      $form_state['values']['field_tabbed_interface']['und'] = $form_state['field']['field_tabbed_interface']['und']['instance']['default_value'];
      $form_state['values']['field_tabbed_interface']['und'][0]['fid'] = variable_get('wetkit_widgets_default_tabbed_interface_fid', NULL);
      $form['field_tabbed_interface']['und'][0]['fid']['#default_value'] = variable_get('wetkit_widgets_default_tabbed_interface_fid', NULL);
    }
  }
}

/**
 * Implement the "Content Settings" fieldset in a pre-render. This fixes issues with image caused by initially
 * doing this in a form_alter.
 *
 * @see http://drupal.org/node/1567704
 */
function wetkit_widgets_fieldable_panel_pane_pre_render($element) {
  // Add a content settings fieldset.
  $element['content_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Settings'),
    '#weight' => 1,
  );

  // Add any remaining fields to the content settings fieldset.
  foreach ($element as $key => $value) {
    if (substr($key, 0, 6) == 'field_') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
    if (substr($key, 0, 8) == 'language') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
  }

  return $element;
}

/** 
 * Implementation of hook_entity_info_alter()
 */
function wetkit_widgets_entity_info_alter(&$entity_info) {

  // Tabbed Interface
  $entity_info['fieldable_panels_pane']['bundles']['tabbed_interface'] = array(
    'label' => t('Add tabbed interface'),
    'pane category' => t('WetKit'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_tabbed_interface.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/tabbed-interface',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

}

/**
 * Implementation hook_theme_registry_alter()
 */
function wetkit_widgets_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'wetkit_widgets') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements hook_theme().
 */
function wetkit_widgets_theme($existing, $type, $theme, $path) {
  return array(
    'fieldable_panels_pane' => array(
      'render element' => 'elements',
      'template'  => 'templates/fieldable_panels_pane/wetkit-widgets-fieldable-panels-pane',
      'path' => drupal_get_path('module', 'wetkit_widgets'),
    ),
    'wetkit_tab_interface_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_display_ENTITY_TYPE_alter().
 *
 * Update the display settings with the option selected on the entity view mode field.
 */
function wetkit_widgets_field_display_fieldable_panels_pane_alter(&$display, $context) {
  if ($context['field']['field_name'] == 'field_existing_content') {
    $view_mode = $context['entity']->field_view_mode[LANGUAGE_NONE][0]['value'];

    if (!empty($view_mode)) {
      $display['settings']['view_mode'] = $view_mode;
    }
  }
}