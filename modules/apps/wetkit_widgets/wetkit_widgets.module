<?php

include_once('wetkit_widgets.features.inc');
include_once('wetkit_widgets.plugins.inc');

/**
 * Implements hook_apps_app_info()
 */
function wetkit_widgets_apps_app_info() {
  return array(
    'configure form' => 'wetkit_widgets_configure_form',
  );
}

/**
 * Configuration Form for WetKit Magic
 */
function wetkit_widgets_configure_form($form, &$form_state) {
  $form = array();

  $form['wetkit_widgets_spotlight_rotation_time'] = array(
    '#title' => t('Spotlight Rotation Time'),
    '#type' => 'textfield',   
    '#required' => TRUE,
    '#default_value' => variable_get('wetkit_widgets_spotlight_rotation_time', 4),
    '#description' => t('How many seconds do you want between rotations of the spotlight widget?'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_init()
 */
function wetkit_widgets_init() {

  // Set the rotation time
  $rotation_time = 1000 * variable_get('wetkit_widgets_spotlight_rotation_time', 4);
  $js_variables = array('spotlight_settings' => array('rotation_time' => $rotation_time));
  drupal_add_js($js_variables, 'setting');
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function wetkit_widgets_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implementation of hook_ctools_content_subtype_alter()
 */
function wetkit_widgets_ctools_content_subtype_alter(&$subtype, &$plugin) {

  // Modify the menu block plugin to better fit into our UI
  if ($plugin['module'] == 'menu_block' && $subtype['menu_title'] == 'Main menu') {
    $subtype['category'][0] = 'Custom';
    $subtype['top level'] = TRUE;
    $subtype['title'] = 'Add submenu';
    $subtype['icon'] = drupal_get_path('module', 'wetkit_widgets') . '/images/icon_submenu.png';
    $subtype['admin css'] = array(drupal_get_path('module', 'menu_block') . '/menu-block-admin.css');
    $subtype['admin js'] = array(drupal_get_path('module', 'menu_block') . '/menu-block.js');
  }

  // Modify the general content item to appear in the generic content sidebar area
  if ($plugin['module'] == 'views_content' && $subtype['title'] == 'Piece of Content') {
    $subtype['category'][0] = 'Custom';
    $subtype['top level'] = TRUE;
    $subtype['title'] = 'Add content item';
    $subtype['icon'] = drupal_get_path('module', 'wetkit_widgets') . '/images/icon_content_item.png';
  }

  // Modify the general content listing to appear in the generic content sidebar area
  if ($plugin['module'] == 'views_content' && $subtype['title'] == 'List of Content') {
    $subtype['category'][0] = 'Custom';
    $subtype['top level'] = TRUE;
    $subtype['title'] = 'Add content list';
    $subtype['icon'] = drupal_get_path('module', 'wetkit_widgets') . '/images/icon_content_list.png';
  }

  // Modify the plugins so we do away with this "node" and "entity" thing
  if ($subtype['category'] == 'Node' || $subtype['category'] == 'Entity') {
    $subtype['category'] = t('Page Content');
  }
  if ($subtype['category'] == 'User') {
    $subtype['category'] = t('User Content');
  }
  if ($subtype['category'] == 'Taxonomy_term' || $subtype['category'] == 'Taxonomy term') {
    $subtype['category'] = t('Category Content');
  }

  // Modify the plugins so we have consistent language around "form" content
  if ($subtype['category'] == 'Form') {
    $subtype['category'] = t('Form Content');
  }
}

/**
 * Implementation of hook_form_alter()
 */
function wetkit_widgets_form_alter(&$form, &$form_state, $form_id) {

  // Simplify the menu block edit form
  if ($form_id == 'menu_block_menu_tree_content_type_edit_form') {
    $form['admin_title']['#access'] = FALSE;
    $form['depth']['#access'] = FALSE;
    $form['display_options']['#default_value'] = 'advanced';
    $form['display_options']['#access'] = FALSE;
    $form['title_link']['#access'] = FALSE;
    $form['buttons']['#prefix'] = '<div class="menu-block-ctools-buttons">';
  }

  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {
    // Add a custom pre-render method to deal with "Content Settings" fieldset.
    $form['#pre_render'][] = 'wetkit_widgets_fieldable_panel_pane_pre_render';
    
    // Remove the revisioning information
    $form['revision']['revision']['#type'] = 'value';
    $form['revision']['log']['#access'] = FALSE;

    // Add a widget setting
    $form['widget_settings']['#type'] = 'fieldset';
    $form['widget_settings']['#title'] = t('General Settings');
    $form['title']['#attributes']['placeholder'] = $form['title']['#title'];
    unset($form['title']['#title']);
    $form['widget_settings']['title'] = $form['title'];
    unset($form['title']);

    // Move the link field into the general settings tab.
    $form['widget_settings']['link'] = $form['link'];
    unset($form['link']);

    // Set proper display mode options for existing content bundles.  
    if (!empty($form['#entity']) && $form['#entity']->bundle == 'existing_content') {
      $form['field_view_mode'][LANGUAGE_NONE]['#options'] = wetkit_core_view_mode_options();
      $form['field_view_mode'][LANGUAGE_NONE]['#required'] = TRUE;
      $view_mode =  $form['#entity']->field_view_mode[LANGUAGE_NONE][0]['value'];
      $form['field_view_mode'][LANGUAGE_NONE]['#default_value'] = !empty($view_mode) ? $view_mode : 'full';
    }


    // Find file / image fields and ensure they are using a FID instead of a UUID.
    // TODO - This can be removed if we are not supporting the UUID module    
    foreach ($form as $key => $value) {
      if (substr($key, 0, 6) == 'field_') {
        if (!empty($value['und']['0']['#bundle']) && ($value['und']['0']['#bundle'] == 'image' || $value['und']['0']['#bundle'] == 'file')) {
          foreach ($value['und'] as $subkey => $subvalue) {
            if (is_numeric($subkey)) {
              // Change UUID to FID to resolve issue with UUID handling. This solves a bug with Fieldable Panels Panes that
              // hopefully will be resolved soon.
              if (!empty($subvalue['#default_value']['fid']) && strlen($subvalue['#default_value']['fid']) == 36) {
                $form[$key]['und'][$subkey]['#default_value']['fid'] = db_query('SELECT fid FROM {file_managed} WHERE uuid = :uuid', array(':uuid' => $subvalue['#default_value']['fid']))->fetchField();
              }
            }
          }
        }
      }
    }

    // Improve the reusable interface
    $form['reusable']['#title'] = t('Reusable Settings');
    $form['reusable']['#type'] = 'fieldset';
    $form['reusable']['#process'] = array('ctools_dependent_process');
    $form['reusable']['#id'] = 'reusable-settings';
    if ($form['reusable']['reusable']['#default_value'] != 1) {
      $form['reusable']['warning']['#access'] = FALSE;
    }
    $form['reusable']['category']['#value'] = 'Reusable Content';
    $form['reusable']['category']['#type'] = 'value';
    $form['reusable']['admin_description']['#access'] = FALSE;
  }

  // Improve the usability and functionality of the table field widget
  if (!empty($form['field_basic_table_table'])) {
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['import']['#access'] = FALSE; // Remove importing from CSV
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['#collapsible'] = FALSE;
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['#collapsed'] = FALSE;
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_cols']['#field_prefix'] = $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_cols']['#title'] . '? ';
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_cols']['#title'] = '';    
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_rows']['#field_prefix'] = $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_rows']['#title'] . '? ';
    $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_rows']['#title'] = '';
  }

  // Make some form modifications in cases where the item is being shown for the first time
  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form' && ($form_state['clicked_button']['#value'] == 'Update Preview' || ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id'])))) {

    // Quick modification to get tablefield to render correctly with default values
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_basic_table_table'])) {
      $form_state['values']['field_basic_table_table']['und'] = $form_state['field']['field_basic_table_table']['und']['instance']['default_value'];
    }

    // Quick exclusion of column and row counts from being autosubmited
    if (!empty($form['field_basic_table_table'])) {
      $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_cols']['#attributes']['class'][] = 'ctools-auto-submit-exclude';
      $form['field_basic_table_table'][LANGUAGE_NONE][0]['tablefield']['rebuild']['count_rows']['#attributes']['class'][] = 'ctools-auto-submit-exclude';
    }

    // Quick modification to get the spotlight to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_basic_spotlight_items'])) {
      $form_state['values']['field_basic_spotlight_items']['und'] = $form_state['field']['field_basic_spotlight_items']['und']['instance']['default_value'];
      $form_state['values']['field_basic_spotlight_items']['und'][0]['fid'] = variable_get('wetkit_widgets_default_spotlight_fid', NULL);
      $form['field_basic_spotlight_items']['und'][0]['fid']['#default_value'] = variable_get('wetkit_widgets_default_spotlight_fid', NULL);
    }

    // Quick modification to get the tabbed interface to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_tabbed_interface'])) {
      $form_state['values']['field_tabbed_interface']['und'] = $form_state['field']['field_tabbed_interface']['und']['instance']['default_value'];
      $form_state['values']['field_tabbed_interface']['und'][0]['fid'] = variable_get('wetkit_widgets_default_tabbed_interface_fid', NULL);
      $form['field_tabbed_interface']['und'][0]['fid']['#default_value'] = variable_get('wetkit_widgets_default_tabbed_interface_fid', NULL);
    }

    // Quick modification to get the image to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_basic_image_image'])) {
      $form_state['values']['field_basic_image_image'][LANGUAGE_NONE][0]['fid'] = variable_get('wetkit_widgets_default_image_fid', NULL);
      $form['field_basic_image_image'][LANGUAGE_NONE][0]['#default_value']['fid'] = variable_get('wetkit_widgets_default_image_fid', NULL);
    }

    // Quick modification to get the file to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_basic_file_file'])) {
      $form_state['values']['field_basic_file_file'][LANGUAGE_NONE][0]['fid'] = variable_get('wetkit_widgets_default_basic_file_fid', NULL);
      $form_state['values']['field_basic_file_file'][LANGUAGE_NONE][0]['display'] = TRUE;
      $form['field_basic_file_file'][LANGUAGE_NONE][0]['#default_value']['fid'] = variable_get('wetkit_widgets_default_basic_file_fid', NULL);
      $form['field_basic_file_file'][LANGUAGE_NONE][0]['#default_value']['display'] = TRUE;
    }

    // Quick modification to get the video to render correctly with preview content
    if ($form_state['op'] == 'add' && empty($form_state['input']['form_build_id']) && !empty($form_state['field']['field_video_video'])) {
      $form_state['values']['field_video_video'][LANGUAGE_NONE][0]['fid'] = variable_get('wetkit_widgets_default_video_fid', NULL);
      $form['field_video_video'][LANGUAGE_NONE][0]['#default_value']['fid'] = variable_get('wetkit_widgets_default_video_fid', NULL);
    } 
  }  
}

/**
 * Impliment the "Content Settings" fieldset in a pre-render. This fixes issues with image caused by initially
 * doing this in a form_alter.
 *
 * @see http://drupal.org/node/1567704
 */
function wetkit_widgets_fieldable_panel_pane_pre_render($element) {
  // Add a content settings fieldset.
  $element['content_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Settings'),
    '#weight' => 1,
  );

  // Add any remaining fields to the content settings fieldset.
  foreach ($element as $key => $value) {
    if (substr($key, 0, 6) == 'field_') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
  }

  return $element;
}



/** 
 * Implementation of hook_entity_info_alter()
 */
function wetkit_widgets_entity_info_alter(&$entity_info) {

  // Quick links
  $entity_info['fieldable_panels_pane']['bundles']['quick_links'] = array(
    'label' => t('Add links'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_link.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/quick-links',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Basic file
  $entity_info['fieldable_panels_pane']['bundles']['basic_file'] = array(
    'label' => t('Add file'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_file.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/basic-file',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Basic Image
  $entity_info['fieldable_panels_pane']['bundles']['image'] = array(
    'label' => t('Add image'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_image.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/image',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Basic text
  $entity_info['fieldable_panels_pane']['bundles']['text'] = array(
    'label' => t('Add text'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_text.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/text',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Basic Map
  $entity_info['fieldable_panels_pane']['bundles']['map'] = array(
    'label' => t('Add map'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_map.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/map',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
 
  // Basic table
  $entity_info['fieldable_panels_pane']['bundles']['table'] = array(
    'label' => t('Add table'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_table.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/table',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Basic video
  $entity_info['fieldable_panels_pane']['bundles']['video'] = array(
    'label' => t('Add video'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_video.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/video',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );

  // Spotlight
  $entity_info['fieldable_panels_pane']['bundles']['spotlight'] = array(
    'label' => t('Add spotlight'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_spotlight.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/spotlight',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  
  // Tabbed Interface
  $entity_info['fieldable_panels_pane']['bundles']['tabbed_interface'] = array(
    'label' => t('Add tabbed interface'),
    'pane category' => t('WetKit'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_tabbed_interface.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/tabbed-interface',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
  
  // Existing content.
  /* TODO - Which is better? FPP implementation of Views??
  $entity_info['fieldable_panels_pane']['bundles']['existing_content'] = array(
    'label' => t('Add content item'),
    'pane category' => t('Custom'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_spotlight.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/existing-content',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  ); 
  */
}

/**
 * Implements hook_views_slideshow_widget_pager_info().
 * 
 * Adapted from http://drupal.org/sandbox/longwave/1340916
 */
function wetkit_widgets_views_slideshow_widget_pager_info($view) {
  return array(
    'wetkit_widgets' => array(
      'name' => t('Simple counter'),
    ),
  );
}

/**
 * Implementation hook_theme_registry_alter()
 */
function wetkit_widgets_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'wetkit_widgets') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements hook_theme().
 */
function wetkit_widgets_theme($existing, $type, $theme, $path) {
  return array(
    'wetkit_widgets' => array(
      'variables' => array('vss_id' => NULL, 'view' => NULL, 'settings' => array(), 'location' => NULL, 'attributes' => array()),
      'template' => 'templates/views/views-slideshow-pager-fields',
      'path' => drupal_get_path('module', 'wetkit_widgets'),
    ),
    'wetkit_widgets_pager_field_item' => array(
      'variables' => array('vss_id' => NULL, 'item' => NULL, 'count' => NULL, 'location' => NULL),
      'template' => 'templates/views/views-slideshow-pager-field-item',
      'path' => drupal_get_path('module', 'wetkit_widgets'),
    ),
    'fieldable_panels_pane' => array(
      'render element' => 'elements',
      'template'  => 'templates/fieldable_panels_pane/wetkit-widgets-fieldable-panels-pane',
      'path' => drupal_get_path('module', 'wetkit_widgets'),
    ),
    'wetkit_spotlight_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
    'wetkit_tab_interface_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Template preprocess function for Views Slideshow simple pager.
 */
function template_preprocess_wetkit_widgets(&$vars) {
  // Call the fields pager preprocess function.
  _views_slideshow_preprocess_views_slideshow_pager_fields($vars);

  // Override the (empty) rendered field items with our simple pager.
  $vars['rendered_field_items'] = '';
  if (!($vars['settings']['hide_on_single_slide'] && count($vars['view']->result) == 1)) {
    foreach ($vars['view']->result as $count => $node) {
      $item = l(($count+1), '', array('fragment' => $count));
      $vars['rendered_field_items'] .= theme('wetkit_widgets_pager_field_item', array('vss_id' => $vars['vss_id'], 'item' => $item, 'count' => $count, 'location' => $vars['location']));
    }
  }

  // Clone the pager fields JavaScript object and methods.
  drupal_add_js('Drupal.viewsSlideshowSimplePager = Drupal.viewsSlideshowPagerFields || {};', 'inline');
}

/**
 * Implementation of hook_preprocess_views_slideshow_pager_field_item()
 */
function template_preprocess_wetkit_widgets_pager_field_item(&$vars) {
  _wetkit_widgets_preprocess_wetkit_widgets_pager_field_item($vars);
}

/**
 * Views Slideshow: pager item.
 *
 * @ingroup themeable
 */
function _wetkit_widgets_preprocess_wetkit_widgets_pager_field_item(&$vars) {
  $vars['classes_array'][] = 'views_slideshow_pager_field_item';
  if (!$vars['count']) {
    $vars['classes_array'][] = 'activeSlide';
  }
  $vars['classes_array'][] = ($vars['count'] % 2) ? 'views-row-even' : 'views-row-odd';
}

/**
 * Implementation of hook_field_display_ENTITY_TYPE_alter().
 *
 * Update the display settings with the option selected on the entity view mode field.
 */
function wetkit_widgets_field_display_fieldable_panels_pane_alter(&$display, $context) {
  if ($context['field']['field_name'] == 'field_existing_content') {
    $view_mode = $context['entity']->field_view_mode[LANGUAGE_NONE][0]['value'];

    if (!empty($view_mode)) {
      $display['settings']['view_mode'] = $view_mode;
    }
  }
}
