<?php
/**
 * @file
 */

include_once('wetkit_admin.features.inc');

/**
 * Implementation of hook_apps_app_info()
 */
function wetkit_admin_apps_app_info() {
  return array(
    'configure form' => 'wetkit_admin_configure_form',
  );
}

/**
 * Configuration Form for WetKit Admin
 */
function wetkit_admin_configure_form($form, &$form_state) {
  $form = array();

  $form['wetkit_admin_machine_name'] = array(
    '#title' => t('Machine Name'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Enabled',
      '0' => 'Disabled',
    ),
    '#default_value' => '0',
    '#description' => t('Do you want to provide an option to specify a machine name (provided by the Default Content module) on the content editing form?'),
  );

  $form['wetkit_admin_revision_option'] = array(
    '#title' => t('Create revision'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Enabled',
      '0' => 'Disabled',
    ),
    '#default_value' => '0',
    '#description' => t('Do you want to provide an option to create a new revision for content on the content editing form?'),
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_ctools_plugin_directory()
 */
function wetkit_admin_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_panels_pane_content_alter().
 */
function wetkit_admin_panels_pane_content_alter($content, $pane, $args, $context) {
  // Pass the title properly through to style plugins rendering regions
  // TODO - check with Earl on if this is best way to handle this data exchange
  $pane->title = (isset($content->title)) ? $content->title : NULL;

  // Hide the title of the featured category pane if there isn't any content
  // TODO - this could be extended generally to resolve other issues
  if ($pane->subtype == 'node:field_featured_categories' && !empty($content->content['field_featured_categories']) && $content->content['field_featured_categories']['#access'] == FALSE) {
    $content->title = '';
  }
}

/**
 * Implementation of hook_form_alter()
 */
function wetkit_admin_form_alter(&$form, &$form_state, $form_id) {

  // Improve the title field
  if (isset($form['title']['#title'])) {
    $form['title']['#attributes']['placeholder'] = $form['title']['#title'];
  }

  // Improve the URL selection form
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'node' && isset($form['path']) && isset($form['path']['alias'])) {
    unset($form['path']['#type']); // remove the fieldset
    unset($form['path']['alias']['#description']); 
    $form['path']['alias']['#title'] = '<strong>' . t('Permalink') . ':</strong> ';
    $form['path']['alias']['#title'] .= (isset($_SERVER['HTTPS'])) ? 'https://' . $_SERVER['HTTP_HOST'] . '/' : 'http://' . $_SERVER['HTTP_HOST'] . '/';
    if (isset($form['path']['pathauto'])) {
      // Remove the states property since we are hiding the field
      $form['path']['alias']['#states'] = array();
      if (!$form['path']['alias']['#default_value']) {
        $form['path']['alias']['#attributes'] = array('placeholder' => '<' . t('magically generated') . '>');
      }
      $form['#submit'][] = 'wetkit_admin_pathauto_submit';
    }
  }
  
  // Add clearfix to node body container to prevent clearing issue with
  // vertical tabs - @see https://drupal.org/node/1686500
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'node' && isset($form['body']['#type']) && $form['body']['#type'] == 'container') {
    $form['body']['#attributes']['class'][] = 'clearfix';
  }

  // Hide the machine name options
  if (isset($form['machine_name_fs'])) {
    $form['options']['machine_name_fs']['machine_name'] = $form['machine_name_fs']['machine_name'];
    $form['options']['machine_name_fs']['machine_name']['#size'] = '';
    $form['options']['machine_name_fs']['#weight'] = 30;
    $form['options']['machine_name_fs']['#access'] = variable_get('wetkit_admin_machine_name', FALSE);
    unset($form['options']['machine_name_fs']['machine_name']['#description']);
    unset($form['machine_name_fs']);
  }

  // Improve the publishing options
  if (isset($form['options'])) {
    $form['options']['promote']['#access'] = FALSE;
    $form['options']['sticky']['#access'] = FALSE;
  }

  // Move the featured field into publishing options
  if (!empty($form['field_featured_status'])) {
    $form['options']['field_featured_status'] = $form['field_featured_status'];
    //unset($form['field_featured_status']);
    //TODO: Upstream this fix to Panopoly
    $form['field_featured_status'] = array('#language' => NULL);
  }

  // Remove the description from the featured image
  if (!empty($form['field_featured_image'])) {
    $form['field_featured_image']['und'][0]['#description'] = '';
  }

  // Consider the featured category
  if (!empty($form['field_featured_categories']) && $form['field_featured_categories']['und']['#type'] != 'textfield') {
    // Hide this field if there are no options
    if (count($form['field_featured_categories']['und']['#options']) == 0 || (!empty($form['field_featured_categories']['und']['#options']['_none']) && count($form['field_featured_categories']['und']['#options']) == 1)) {
      $form['field_featured_categories']['#access'] = FALSE;
    }
  }

  // Improve authoring options
  if (isset($form['author']) && isset($form['#entity_type']) && $form['#entity_type'] == 'node') {
    unset($form['author']['name']['#description']);
    $form['author']['name']['#title'] = t('Author');
    $form['author']['name']['#size'] = '40';
    $form['author']['name']['#weight'] = 4;
    unset($form['author']['date']['#description']);
    $form['author']['date']['#weight'] = 5;
    unset($form['author']['date']['#title']);
    $form['author']['date']['#size'] = 20;
  }

  // Make revisioning happen by default
  if (isset($form['revision_information']['revision'])) {
    unset($form['revision_information']['#type']);
    $form['revision_information']['log']['#access'] = FALSE;
    $form['options']['revision'] = $form['revision_information']['revision'];
    $form['options']['revision']['#access'] = variable_get('wetkit_admin_revision_option', FALSE);
    unset($form['revision_information']['revision']);
  }

  // Improve the menu adding experience
  if (isset($form['menu']) && isset($form['menu']['enabled'])) {
    $form['menu']['link']['link_title']['#size'] = '';
    $form['menu']['link']['weight']['#access'] = FALSE;
    $form['menu']['link']['link_title']['#title'] = 'Title';
    $form['menu']['link']['parent']['#title'] = t('Parent');
    // TODO - make this an optional thing in the settings
    $form['menu']['link']['description']['#access'] = FALSE; 
    $form['#validate'][] = 'wetkit_admin_menu_validate';
  }

  // Add our custom closing operation for the modal
  if ((strpos($form['#action'], 'admin/wetkit_apps/configure') || strpos($form['#action'], 'admin/wetkit_theme/configure')) && TRUE) {
    $form['#submit'][] = 'wetkit_admin_modal_close_submit';
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function wetkit_admin_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['wetkit_admin'];
    unset($implementations['wetkit_admin']);
    $implementations['wetkit_admin'] = $group;
  }
}

/**
 * Submit function for adding pathauto settings
 */
function wetkit_admin_pathauto_submit($form, &$form_state) {
  // If the user hasn't specified a path, autogenerate
  if (empty($form_state['input']['path']['alias'])) {
    $form_state['values']['path']['pathauto'] = TRUE;
    $form_state['input']['path']['pathauto'] = TRUE;
  }
  // If the user has specified a path, dont autogenerate
  else {
    $form_state['values']['path']['pathauto'] = FALSE;
    $form_state['input']['path']['pathauto'] = FALSE;
  }
}

/**
 * Validate function for adding menu validation
 */
function wetkit_admin_menu_validate($form, &$form_state) {
  if ($form_state['input']['menu']['enabled'] && !$form_state['input']['menu']['link_title']) {
    form_set_error('link_title', t('Menu link title is required.'));
  }
}

/**
 * Submit function for closing the custom modal
 */
function wetkit_admin_modal_close_submit($form, &$form_state) {
  if (!empty($form_state['input']['js'])) {
    ctools_include('ajax');
    ctools_include('modal');
    $commands = array();
    $commands[] = ctools_ajax_command_reload();
    print ajax_render($commands);
    exit;
  }
}

/**
 * Implementation of hook_menu
 */
function wetkit_admin_menu() {
  $items['admin/wetkit_apps/configure/%ctools_js/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' =>  'wetkit_admin_apps_app_config_page',
    'page arguments' => array(3, 4, 5),
    'access arguments' => array('administer apps'),
  );
  $items['admin/wetkit_theme/configure/%ctools_js/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' =>  'wetkit_admin_theme_config_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('administer themes'),
  );
  $items['admin/site/panelizer-delete/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wetkit_admin_panelizer_delete_form', 3, 4),
    'access arguments' => array('administer panelizer'),
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function wetkit_admin_menu_alter(&$items) {
  // Set weight of dashboard to be good
  $items['admin/site']['weight'] = -100;
}

/**
 * Menu callback to generate the apps_app_config_page in the ctools modal
 */
function wetkit_admin_apps_app_config_page($js = FALSE, $server_name, $app_name) {
  ctools_include('apps.pages', 'apps', '');
  $title = 'Configure ' . $app_name;
  $output = drupal_render(apps_app_config_page($server_name, $app_name));
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render($title, $output);
  } 
  else {
    drupal_set_title($title);
    return $output;
  }
}

/** 
 * Menu callback to geneate the theme configuration page in the ctools modal
 */
function wetkit_admin_theme_config_page($js = FALSE, $theme_key) {
  $theme_data = list_themes();
  $title = 'Configure ' . $theme_data[$theme_key]->info['name'];
  ctools_include('system.admin', 'system', '');
  $output = drupal_get_form('system_theme_settings', $theme_key);
  if (empty($form_state['executed']) && $js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render($title, $output);
  }
  else {
    drupal_set_title($title);
    return $output;
  }
}

/**
 * Utility function for parsing basic entity info.
 */
function wetkit_admin_entity_parse_info($entity, $type) {
  $entity_info = array();

  switch ($type) {
    case 'node':
      $entity_info['title'] = $entity->title;
      $entity_info['type'] = 'node';
      $entity_info['bundle_type'] = $entity->type;
      $entity_info['id'] = $entity->nid;
      break;
    case 'user':
      $entity_info['title'] = $entity->name;
      $entity_info['type'] = 'user';
      $entity_info['bundle_type'] = 'user';
      $entity_info['id'] = $entity->uid;
      break;
    case 'taxonomy_term':
      $entity_info['title'] = $entity->name;
      $entity_info['type'] = 'taxonomy_term';
      $entity_info['bundle_type'] = $entity->vocabulary_machine_name;
      $entity_info['id'] = $entity->tid;
      break;
  }

  return $entity_info;
}

/**
 * Confirmation form for deleting a panelizer revision.
 */
function wetkit_admin_panelizer_delete_form($form, &$form_state, $entity_type, $entity_id) {

  $entities = entity_load($entity_type, array($entity_id));

  if (!empty($entities)) {
    $entity = reset($entities);
  }

  $entity_info = wetkit_admin_entity_parse_info($entity, $entity_type);

  $form['#redirect'] = 'admin/site';

  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_info['type'],
  );

  $form['entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity_info['id'],
  );

  $form['entity_title'] = array(
    '#type' => 'value',
    '#value' => $entity_info['title'],
  );

  return confirm_form($form, t('Are you sure you want to delete the overriden page template for %title?', array('%title' => $entity_info['title'])), 'admin/site');
}

/**
 * Submit function for deleting a panelizer revision.
 */
function wetkit_admin_panelizer_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/site';

  db_delete('panelizer_entity')
      ->condition('entity_type', $form_state['values']['entity_type'])
      ->condition('entity_id', $form_state['values']['entity_id'])
      ->execute();

  drupal_set_message(t('The overridden page template for %title has been deleted.', array('%title' => $form_state['values']['entity_title'])));
}