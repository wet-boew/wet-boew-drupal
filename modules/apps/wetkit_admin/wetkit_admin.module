<?php
/**
 * @file
 */

include_once('wetkit_admin.features.inc');

/**
 * Implementation of hook_apps_app_info()
 */
function wetkit_admin_apps_app_info() {
  return array(
    'configure form' => 'wetkit_admin_configure_form',
  );
}

/**
 * Configuration Form for WetKit Admin
 */
function wetkit_admin_configure_form($form, &$form_state) {
  $form = array();

  $form['wetkit_admin_machine_name'] = array(
    '#title' => t('Machine Name'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Enabled',
      '0' => 'Disabled',
    ),
    '#default_value' => variable_get('wetkit_admin_machine_name', FALSE),
    '#description' => t('Do you want to provide an option to specify a machine name (provided by the Default Content module) on the content editing form?'),
  );

  $form['wetkit_admin_revision_option'] = array(
    '#title' => t('Create revision'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Enabled',
      '0' => 'Disabled',
    ),
    '#default_value' => variable_get('wetkit_admin_revision_option', FALSE),
    '#description' => t('Do you want to provide an option to create a new revision for content on the content editing form?'),
  );

  $form['wetkit_admin_link_description'] = array(
    '#title' => t('Menu Link Description'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
    ),
    '#default_value' => variable_get('wetkit_admin_link_description', FALSE),
    '#description' => t('Do you want to provide a description field for a menu item link on the node edit page?'),
  );

  return system_settings_form($form);
}


/**
 * Implementation of hook_ctools_plugin_directory()
 */
function wetkit_admin_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_panels_pane_content_alter().
 */
function wetkit_admin_panels_pane_content_alter($content, $pane, $args, $context) {

  // Pass the title properly through to style plugins rendering regions
  $pane->title = (isset($content->title)) ? $content->title : NULL;

  // Hide the title of the featured category pane if there isn't any content
  if ($pane->subtype == 'node:field_featured_categories' && !empty($content->content['field_featured_categories']) && $content->content['field_featured_categories']['#access'] == FALSE) {
    $content->title = '';
  }
}

/**
 * Implementation of hook_form_alter()
 */
function wetkit_admin_form_alter(&$form, &$form_state, $form_id) {

  // Improve the title field
  if (isset($form['title']['#title'])) {
    $form['title']['#attributes']['placeholder'] = $form['title']['#title'];
  }

  // Improve the URL selection form
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'node' && isset($form['path']) && isset($form['path']['alias'])) {
    unset($form['path']['#type']); // remove the fieldset
    unset($form['path']['alias']['#description']); 
    $form['path']['alias']['#title'] = '<strong>' . t('Permalink') . ':</strong> ';
    $form['path']['alias']['#title'] .= (isset($_SERVER['HTTPS'])) ? 'https://' . $_SERVER['HTTP_HOST'] . '/' : 'http://' . $_SERVER['HTTP_HOST'] . '/';
    if (isset($form['path']['pathauto'])) {
      $form['path']['alias']['#states'] = array();
      if (!$form['path']['alias']['#default_value']) {
        $form['path']['alias']['#attributes'] = array('placeholder' => '<' . t('magically generated') . '>');
      }
      $form['#submit'][] = 'wetkit_admin_pathauto_submit';
    }
  }
  
  // Add clearfix to node body container to prevent clearing issue with
  // vertical tabs - @see https://drupal.org/node/1686500
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'node' && isset($form['body']['#type']) && $form['body']['#type'] == 'container') {
    $form['body']['#attributes']['class'][] = 'clearfix';
  }

  // Improve and potentially hide the machine name option from Default Content
  if (isset($form['machine_name_fs'])) {
    $form['options']['machine_name_fs']['machine_name'] = $form['machine_name_fs']['machine_name'];
    $form['options']['machine_name_fs']['machine_name']['#size'] = '';
    $form['options']['machine_name_fs']['#weight'] = 30;
    $form['options']['machine_name_fs']['#access'] = variable_get('wetkit_admin_machine_name', FALSE);
    unset($form['options']['machine_name_fs']['machine_name']['#description']);
    unset($form['machine_name_fs']);
  }

  // Improve the publishing options
  if (isset($form['options'])) {
    $form['options']['promote']['#access'] = FALSE;
    $form['options']['sticky']['#access'] = FALSE;
  }

  // Move the featured field into publishing options
  if (!empty($form['field_featured_status'])) {
    $form['options']['field_featured_status'] = $form['field_featured_status'];
    //unset($form['field_featured_status']);
    //TODO: Upstream this fix to Panopoly
    $form['field_featured_status'] = array('#language' => NULL);
  }

  // Remove the description from the featured image
  if (!empty($form['field_featured_image'])) {
    $form['field_featured_image']['und'][0]['#description'] = '';
  }

  // Hide the featured category field if there are no featured category options
  if (!empty($form['field_featured_categories']) && $form['field_featured_categories']['und']['#type'] != 'textfield') {
    if (count($form['field_featured_categories']['und']['#options']) == 0 || (!empty($form['field_featured_categories']['und']['#options']['_none']) && count($form['field_featured_categories']['und']['#options']) == 1)) {
      $form['field_featured_categories']['#access'] = FALSE;
    }
  }

  // Improve authoring options
  if (isset($form['author']) && isset($form['#entity_type']) && $form['#entity_type'] == 'node') {
    unset($form['author']['name']['#description']);
    $form['author']['name']['#title'] = t('Author');
    $form['author']['name']['#size'] = '40';
    $form['author']['name']['#weight'] = 4;
    unset($form['author']['date']['#description']);
    $form['author']['date']['#weight'] = 5;
    unset($form['author']['date']['#title']);
    $form['author']['date']['#size'] = 20;
  }

  // Make revisioning happen by default
  if (isset($form['revision_information']['revision'])) {
    unset($form['revision_information']['#type']);
    $form['revision_information']['log']['#access'] = FALSE;
    $form['options']['revision'] = $form['revision_information']['revision'];
    $form['options']['revision']['#access'] = variable_get('wetkit_admin_revision_option', FALSE);
    unset($form['revision_information']['revision']);
  }

  // Improve the menu adding experience
  if (isset($form['menu']) && isset($form['menu']['enabled'])) {
    $form['menu']['link']['link_title']['#size'] = '';
    $form['menu']['link']['weight']['#access'] = FALSE;
    $form['menu']['link']['link_title']['#title'] = 'Title';
    $form['menu']['link']['parent']['#title'] = t('Parent');
    $form['menu']['link']['description']['#access'] = variable_get('wetkit_admin_link_description', FALSE); 
    $form['#validate'][] = 'wetkit_admin_menu_validate';
  }
}

/**
 * Implementation of hook_module_implements_alter()
 */
function wetkit_admin_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['wetkit_admin'];
    unset($implementations['wetkit_admin']);
    $implementations['wetkit_admin'] = $group;
  }
}

/**
 * Submit function for adding pathauto settings
 */
function wetkit_admin_pathauto_submit($form, &$form_state) {
  // If the user hasn't specified a path, autogenerate
  if (empty($form_state['input']['path']['alias'])) {
    $form_state['values']['path']['pathauto'] = TRUE;
    $form_state['input']['path']['pathauto'] = TRUE;
  }
  // If the user has specified a path, dont autogenerate
  else {
    $form_state['values']['path']['pathauto'] = FALSE;
    $form_state['input']['path']['pathauto'] = FALSE;
  }
}

/**
 * Validate function for adding menu validation
 */
function wetkit_admin_menu_validate($form, &$form_state) {
  if ($form_state['input']['menu']['enabled'] && !$form_state['input']['menu']['link_title']) {
    form_set_error('link_title', t('Menu link title is required.'));
  }
}

/**
 * Implementation of hook_menu
 */
function wetkit_admin_menu() {

  // Panelizer "revert" page callback
  $items['admin/site/panelizer-delete/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wetkit_admin_panelizer_delete_form', 3, 4),
    'access arguments' => array('administer panelizer'),
  );

  // Add an administration page for WetKit
  $items['admin/wetkit'] = array(
    'title' => 'WetKit',
    'description' => 'Administer all things WetKit.',
    'position' => 'right',
    'weight' => -8,
    'page callback' => 'wetkit_admin_config_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add an administration section for the WetKit dashboard
  $items['admin/wetkit/libraries'] = array(
    'title' => 'WetKit Libraries',
    'description' => 'Libraries of WetKit related items.',
    'position' => 'left',
    'weight' => -50,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add an administration section for WetKit settings
  $items['admin/wetkit/settings'] = array(
    'title' => 'WetKit Settings',
    'description' => 'Configuration related to WetKit',
    'position' => 'right',
    'weight' => -50,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add an administration section for WetKit app settings
  $items['admin/wetkit/apps_settings'] = array(
    'title' => 'Apps Settings',
    'description' => 'Configuration related to WetKit Apps',
    'position' => 'right',
    'weight' => -45,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add settings pages for WetKit and WetKit Apps
  foreach(module_list() as $module) {
    $app_info = module_invoke($module, 'apps_app_info');
    if (!empty($app_info) && !empty($app_info['configure form'])) {
      $module_info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
      if (!empty($module_info['package']) && $module_info['package'] == 'WetKit') {
        $items['admin/wetkit/settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      } else if (!empty($module_info['package']) && $module_info['package'] == 'WetKit Apps') {
        $items['admin/wetkit/app_settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_menu_alter()
 */
function wetkit_admin_menu_alter(&$items) {

  // Set the description of the dashboard
  $items['admin/wetkit/dashboards/site']['description'] = 'This is the primary site dashboard to manage WetKit';

  // Set the description of the page library
  $items['admin/wetkit/libraries/pages']['description'] = 'This is the page library for the site. See your landing pages, page templates, and overriden page templates.';

  // Set the description of the layout library
  $items['admin/wetkit/libraries/layouts']['description'] = 'This is the layout library for the site. See your preset and custom layouts.';

  // Set the description of the pane library
  $items['admin/wetkit/libraries/panes']['description'] = 'This is the pane library for the site. See all of the panes you can add to your pages.';

}

/**
 * Utility function for parsing basic entity info.
 */
function wetkit_admin_entity_parse_info($entity, $type) {
  $entity_info = array();

  switch ($type) {
    case 'node':
      $entity_info['title'] = $entity->title;
      $entity_info['type'] = 'node';
      $entity_info['bundle_type'] = $entity->type;
      $entity_info['id'] = $entity->nid;
      break;
    case 'user':
      $entity_info['title'] = $entity->name;
      $entity_info['type'] = 'user';
      $entity_info['bundle_type'] = 'user';
      $entity_info['id'] = $entity->uid;
      break;
    case 'taxonomy_term':
      $entity_info['title'] = $entity->name;
      $entity_info['type'] = 'taxonomy_term';
      $entity_info['bundle_type'] = $entity->vocabulary_machine_name;
      $entity_info['id'] = $entity->tid;
      break;
  }

  return $entity_info;
}

/**
 * Confirmation form for deleting a panelizer revision.
 */
function wetkit_admin_panelizer_delete_form($form, &$form_state, $entity_type, $entity_id) {

  $entities = entity_load($entity_type, array($entity_id));

  if (!empty($entities)) {
    $entity = reset($entities);
  }

  $entity_info = wetkit_admin_entity_parse_info($entity, $entity_type);

  $form['#redirect'] = 'admin/site';

  $form['entity_type'] = array(
    '#type' => 'value',
    '#value' => $entity_info['type'],
  );

  $form['entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity_info['id'],
  );

  $form['entity_title'] = array(
    '#type' => 'value',
    '#value' => $entity_info['title'],
  );

  return confirm_form($form, t('Are you sure you want to delete the overridden page template for %title?', array('%title' => $entity_info['title'])), 'admin/site');
}

/**
 * Submit function for deleting a panelizer revision.
 */
function wetkit_admin_panelizer_delete_form_submit($form, &$form_state) {

  $form_state['redirect'] = 'admin/site';

  db_delete('panelizer_entity')
      ->condition('entity_type', $form_state['values']['entity_type'])
      ->condition('entity_id', $form_state['values']['entity_id'])
      ->execute();

  drupal_set_message(t('The overridden page template for %title has been deleted.', array('%title' => $form_state['values']['entity_title'])));
}

/**
 * Menu callback: Provide the administration overview page.
 * 
 * Adapted from system_admin_config_page()
 */
function wetkit_admin_config_page() {

  // Check for status report errors.
  if (system_status(TRUE) && user_access('administer site configuration')) {
    drupal_set_message(t('One or more problems were detected with your Drupal installation. Check the <a href="@status">status report</a> for more information.', array('@status' => url('admin/reports/status'))), 'error');
  }
  $blocks = array();
  if ($admin = db_query("SELECT menu_name, mlid FROM {menu_links} WHERE link_path = 'admin/wetkit' AND module = 'system'")->fetchAssoc()) {
    $result = db_query("
      SELECT m.*, ml.*
      FROM {menu_links} ml
      INNER JOIN {menu_router} m ON ml.router_path = m.path
      WHERE ml.link_path <> 'admin/help' AND menu_name = :menu_name AND ml.plid = :mlid AND hidden = 0", $admin, array('fetch' => PDO::FETCH_ASSOC));
    foreach ($result as $item) {
      _menu_link_translate($item);
      if (!$item['access']) {
        continue;
      }
      // The link description, either derived from 'description' in hook_menu()
      // or customized via menu module is used as title attribute.
      if (!empty($item['localized_options']['attributes']['title'])) {
        $item['description'] = $item['localized_options']['attributes']['title'];
        unset($item['localized_options']['attributes']['title']);
      }
      $block = $item;
      $block['content'] = '';
      $block['content'] .= theme('admin_block_content', array('content' => system_admin_menu_block($item)));
      if (!empty($block['content'])) {
        $block['show'] = TRUE;
      }

      // Prepare for sorting as in function _menu_tree_check_access().
      // The weight is offset so it is always positive, with a uniform 5-digits.
      $blocks[(50000 + $item['weight']) . ' ' . $item['title'] . ' ' . $item['mlid']] = $block;
    }
  }
  if ($blocks) {
    ksort($blocks);
    return theme('admin_page', array('blocks' => $blocks));
  }
  else {
    return t('You do not have any administrative items.');
  }
}