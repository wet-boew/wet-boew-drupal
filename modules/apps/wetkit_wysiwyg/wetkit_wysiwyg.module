<?php
/**
 * @file
 */

include_once('wetkit_wysiwyg.features.inc');

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function wetkit_wysiwyg_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
  * Implementation of hook_wysiwyg_plugin().
  */
function wetkit_wysiwyg_wysiwyg_plugin($editor) {
  switch ($editor) {
    case 'tinymce':
      return array(
        'pdw' => array(
          'path' => drupal_get_path('module', 'wetkit_wysiwyg') . '/plugins/wysiwyg/pdw',
          'filename' => 'editor_plugin.js',
          'buttons' => array(
            'pdw_toggle' => t('Kitchen Sink')
          ),
          'url' => 'http://www.neele.name/pdw_toggle_toolbars/',
          'load' => TRUE,
        ),
        'spellchecker' => array(
          'internal' => TRUE,
          'buttons' => array(
            'spellchecker' => t('Spell Check')
          ),
          'url' => 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker',
          'load' => TRUE,
        ),
        'inlinepopups' => array(
          'internal' => TRUE,
          'url' => 'http://www.tinymce.com/wiki.php/Plugin:inlinepopups',
          'load' => TRUE,
        ),
        'wetkitcleanup' => array(
          'path' => drupal_get_path('module', 'wetkit_wysiwyg') . '/plugins/wysiwyg/wetkitcleanup',
          'filename' => 'editor_plugin.js',
          'buttons' => array(
            'wetkitcleanup' => t('WetKit Cleanup Tools')
          ),
          'extended_valid_elements' => array(
            'div[!class|!id|!style|rel],-span[!class|!lang],a[id|name|class|href|rel|title]'
          ),
          'extensions' => array(
            'wetkitcleanup' => t('WetKit Cleanup Tools')
          ),
          'load' => TRUE,
        ),
      );
  }
}


/**
 * Implements of hook_element_info_alter().
 */
function wetkit_wysiwyg_element_info_alter(&$type) {
  // Change text format processing on elements to our version.
  if (isset($type['text_format'])) {
    $type['text_format']['#process'][] = 'wetkit_wysiwyg_filter_process_format';
  }
}

/**
 * Callback for processing the text_format element
 */
function wetkit_wysiwyg_filter_process_format($element) {

  // Set the element above the WYSIWYG textarea
  $element['format']['#weight'] = 1;
  $element['format']['#prefix'] = '<div class="format-toggle">';
  $element['format']['#suffix'] = '</div><div class="clearfix"></div>';
  unset($element['format']['#type']);
  $element['format']['format']['#title'] = 'Editor: ';
  
  // Remove elements from UID 1 user since better format's permissions cannot
  global $user;
  if ($user->uid == 1) {
    $element['format']['help']['#access'] = FALSE;
    $element['format']['guidelines']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Implementation of hook_module_implements_alter()
 */
function wetkit_wysiwyg_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'wysiwyg_editor_settings_alter') {
    $group = $implementations['wetkit_wysiwyg'];
    unset($implementations['wetkit_wysiwyg']);
    $implementations['wetkit_wysiwyg'] = $group;
  }  
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter()
 */
function wetkit_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {

  // Change interface language for tinymce based on context
  if (isset($settings['language'])) {
    global $language;
    if ($settings['language'] != $language->language) {
      // Check existence of TinyMCE core language file.
      if (file_exists($context['editor']['library path'] .'/langs/'. $language->language .'.js')) {
        // Check existence of TinyMCE theme language file.
        if (file_exists($context['editor']['library path'] .'/themes/'. $context['theme'] .'/langs/'. $language->language .'.js')) {
          $settings['language'] = $language->language;
        }
      }
    }
  }

  switch ($context['editor']['name']) {
    case 'tinymce':

      // Define the skin to use
      $settings['skin'] = 'cirkuit';

      // Define the spellchecking settings
      $settings['spellchecker_languages'] = ($settings['language'] == 'fr') ? '+French=fr' : '+English=en';

      // Process a default order for the WYSIWYG
      $enabled_buttons = preg_split('/,/', $settings['theme_advanced_buttons1']);
      $default_buttons = array('bold', 'italic', 'strikethrough', '|', 'bullist', 'numlist', 'blockquote', '|', 'justifyleft', 'justifycenter', 'justifyright', '|', 'link', 'unlink', 'break', '|', 'fullscreen', 'spellchecker', 'media', 'captionfilter', 'pdw_toggle', 'PAGEBREAK', 'wetkitcleanup', '|', 'formatselect', '|', 'underline', '|', 'justifyfull', '|', 'forecolor', '|', 'pastetext', 'pasteword', 'removeformat', '|', 'charmap', '|', 'indent', 'outdent', '|', 'undo', 'redo'); 
      foreach ($default_buttons as $button) {
        if (in_array($button, $enabled_buttons)) {
          unset($enabled_buttons[array_search($button, $enabled_buttons)]);
        }
        elseif ($button != '|' && $button != 'PAGEBREAK') {
          unset($default_buttons[array_search($button, $default_buttons)]);
        }
      }

      // Define the final button row settings
      $default_buttons_list = preg_split('/,PAGEBREAK,/', implode(',', $default_buttons));
      $settings['theme_advanced_buttons1'] = $default_buttons_list[0];
      $settings['theme_advanced_buttons2'] = $default_buttons_list[1];
      $settings['theme_advanced_buttons3'] = (count($enabled_buttons) > 0) ? implode(',', $enabled_buttons) : NULL;

      // Define PDW Plugin Settings
      $settings['pdw_toggle_on'] = '1'; 
      $settings['pdw_toggle_toolbars'] = (count($enabled_buttons) > 0) ? '2,3' : '2';

      // Enable the inlinepopups and modal settings
      $settings['plugins'] .= ',inlinepopups';
      $settings['dialog_type'] = 'modal';

      break;
    case 'markitup':

      // Load the appropriate CSS and JS
      drupal_add_css($context['editor']['library path'] . '/markitup/sets/html/style.css'); 
      drupal_add_js($context['editor']['library path'] . '/markitup/sets/html/set.js');

      // Defin the new header buttons
      $header_buttons = array(
        'header-begin' => array(
          'className' => 'markItUpSeparator',
        ),
        'h1' => array(
          'name' => t('Heading 1'),
          'className' => 'markitup-h1',
          'key' => '1',
          'openWith' => '<h1(!( class="[![Class]!]")!)>',
          'closeWith' => '</h1>',
          'placeHolder' => 'Your title here...',
        ),
        'h2' => array(
          'name' => t('Heading 2'),
          'className' => 'markitup-h2',
          'key' => '2',
          'openWith' => '<h2(!( class="[![Class]!]")!)>',
          'closeWith' => '</h2>',
          'placeHolder' => 'Your title here...',
        ),
        'h3' => array(
          'name' => t('Heading 3'),
          'className' => 'markitup-h3',
          'key' => '3',
          'openWith' => '<h3(!( class="[![Class]!]")!)>',
          'closeWith' => '</h3>',
          'placeHolder' => 'Your title here...',
        ),
        'h4' => array(
          'name' => t('Heading 4'),
          'className' => 'markitup-h4',
          'key' => '4',
          'openWith' => '<h4(!( class="[![Class]!]")!)>',
          'closeWith' => '</h4>',
          'placeHolder' => 'Your title here...',
        ),
        'paragraph' => array(
          'name' => t('Paragraph'),
          'className' => 'markitup-paragraph',
          'key' => 'p',
          'openWith' => '<p(!( class="[![Class]!]")!)>',
          'closeWith' => '</p>',
        ),
        'header-end' => array(
          'className' => 'markItUpSeparator',
        ),
      );

      // Define the list styles
      $list_styles = array(
        'list-bullet' => array(
          'name' => t('Unordered List'),
          'className' => 'markitup-list-bullet',
          'openWith' => "<ul>\n",
          'closeWith' => '</ul>',
        ),
        'list-numeric' => array(
          'name' => t('Ordered List'),
          'className' => 'markitup-list-numeric',
          'openWith' => "<ol>\n",
          'closeWith' => '</ol>',
        ),
      );

      // Add the header buttons to the end
      foreach ($header_buttons as $tag => $details) {
        $settings['markupSet'][$tag] = $details;
        $context['profile']->settings['buttons']['html'][$tag] = 1;
      }

      // Add the list styles to the end
      foreach ($list_styles as $tag => $details) {
        $settings['markupSet'][$tag] = $details;
        $context['profile']->settings['buttons']['html'][$tag] = 1;
      }
      break;
  }
}

