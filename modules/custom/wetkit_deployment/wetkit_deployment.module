<?php
/**
 * @file
 * Code for the WetKit Deployment Deployment feature.
 */

include_once 'wetkit_deployment.features.inc';
include_once 'wetkit_deployment.deploy_actions.inc';
include_once 'wetkit_deployment.deploy_queue.inc';
include_once 'theme/wetkit_deployment.theme.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function wetkit_deployment_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_entity_uuid_load().
 */
function wetkit_deployment_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {

  }
}

/**
 * Implements hook_menu().
 */
function wetkit_deployment_menu() {
  // Deployment menu link.
  $items['admin/dashboard/deployment/deploy'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Deploy for WetKit',
    'description' => 'Simplest possible menu type, and the parent menu entry for others',
    'page callback' => '_wetkit_deployment_deploy',
    'page arguments' => array('context' => 'wetkit_deployment'),
    'access callback' => TRUE,
    'menu_name' => 'navigation',
    'expanded' => TRUE,
  );
  $items['wetkit_deployment_ajax/%ctools_js/%'] = array(
      'type' => MENU_NORMAL_ITEM,
      'title' => 'Modal dialog for deployed content',
      'page arguments' => array(1, 2),
      'page callback' => '_wetkit_deployment_modal',
      'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback for the simplest introduction menu entry.
 *
 * @param $content
 *   Some content passed in.
 */
function _wetkit_deployment_deploy($context = NULL) {
  global $user;
  $deploy = deploy_plan_load($context);
  if ($user->uid == $deploy->deploy_by_user) {
    if ($deploy) {
      $deploy->deploy();
    }
    drupal_goto('admin/dashboard/deployment');
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function wetkit_deployment_ajax_render_alter(&$commands) {
  //unset($commands[1]);
}
/**
 * A modal static page callback.
 * @param $js
 *   boolean CTools determination whether the user's browser is javascript enabled. 
 * @param $nid
 *   string The node ID of passed as an argument from the hook_menu() path
 * @return
 *   string The contents of the node, that will fill the modal window.
 */
function _wetkit_deployment_modal($js = NULL, $nid = NULL) {
  if ($nid == NULL) {
    // You can customize the string below, or use a drupal_goto() to
    // send the user to a custom error page.
    return 'No node id was sent. Error.';
  }
  if ($js) {
    // Required includes for ctools to work:
    ctools_include('ajax');
    ctools_include('modal');
  }
  // Load the node obkect
  $node = node_load($nid);
  // Drupal 7 requires a render of the node object in order to obtain a string.
  // Note that I am able to customize the fields by using the "Teaser" display mode 
  // under admin/structure/types.
  //$contents = render(node_view($node, 'teaser', NULL));
  return ctools_modal_render($node->title, '<p>Sample Body Content</p>');
}

/**
 * Implements hook_theme().
 */
function wetkit_deployment_theme() {
  return array(
    'wetkit_deployment_items' => array(
      'variables' => array('items' => NULL),
    ),
    'wetkit_deploy_ui_overview' => array(
      'variables' => array('blocks' => array()),
    ),
    'wetkit_deploy_ui_overview_plan_content' => array(
      'variables' => array('info' => array()),
    ),
  );
}

/**
 * Allow modules to modify an entity before it gets deployed.
 *
 * @param $entity
 *   The entity being deployed.
 *
 * @param $entity_type
 *   The entity type; e.g. 'node' or 'user'.
 */
function wetkit_deployment_deploy_entity_alter(&$entity, $entity_type) {
  if ($entity_type = 'node') {

  }
}

/**
 * Implements hook_deploy_aggregators().
 */
function wetkit_deployment_deploy_aggregators() {
  $path = drupal_get_path('module', 'wetkit_deployment') . '/plugins/deployment';
  return array(
    'WetKitDeployAggregatorManaged' => array(
      'name' => 'WetKit Managed aggregator',
      'description' => 'Provides methods for modules (or users) to manually manage entitites to be aggregated for deployment.',
      'handler' => array(
        'class' => 'WetKitDeployAggregatorManaged',
        'file' => 'WetKitDeployAggregatorManaged.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * Implements hook_deploy_processors().
 */
function wetkit_deployment_deploy_processors() {
  $path = drupal_get_path('module', 'wetkit_deployment') . '/plugins/deployment';
  return array(
    'WetKitDeployProcessorQueue' => array(
      'name' => 'WetKit Queue API',
      'description' => 'All entities are processed with the Queue API. Works best when deployments are large.',
      'handler' => array(
        'class' => 'WetKitDeployProcessorQueue',
        'file' => 'WetKitDeployProcessorQueue.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * Implements hook_cron_queue_info().
 */
function wetkit_deployment_cron_queue_info() {
  $queues = array();
  if (variable_get('wetkit_deployment_enable_cron', TRUE)) {
    $queues['wetkit_deploy'] = array(
      'worker callback' => 'wetkit_deployment_worker_deploy',
      'time' => 180,
    );
    $queues['wetkit_publish'] = array(
      'worker callback' => 'wetkit_deployment_worker_publish',
      'time' => 180,
    );
    variable_set('wetkit_deployment_enable_cron', FALSE);
  }
  return $queues;
}

/**
 * Processes a single queued item for deployment.
 */
function wetkit_deployment_worker_deploy($entity, &$context = NULL) {
  $endpoint = deploy_endpoint_load($entity->__metadata['endpoint_name']);
  $plan = deploy_plan_load($entity->__metadata['plan_name']);

  if ($plan && $endpoint) {
    $entities = array(array('type' => $entity->__metadata['type'], 'id' => $entity->__metadata['id']));
    $iterator = deploy_iterator($entities);
    $endpoint->deploy($entity->__metadata['deployment_key'], $iterator, $entity->__metadata['lock_name']);
  }
}

/**
 * Processes a single queued item for publishing.
 */
function wetkit_deployment_worker_publish($entity, &$context = NULL) {
  $endpoint = deploy_endpoint_load($entity->__metadata['endpoint_name']);
  $plan = deploy_plan_load($entity->__metadata['plan_name']);

  if ($plan && $endpoint) {
    $entities = array(array('type' => $entity->__metadata['type'], 'id' => $entity->__metadata['id']));
    $iterator = deploy_iterator($entities);
    $endpoint->publish($entity->__metadata['deployment_key'], $iterator, $entity->__metadata['lock_name']);

    $context['results'][$entity->__metadata['endpoint_name']] = $entity->__metadata['plan_name'];
  }
}

/**
 * Implements hook_form_alter().
 */
function wetkit_deployment_form_alter(&$form, &$form_state, $form_id) {
  // Peform logic on generic total control types.
  $deployment_types = array(
    'wetkit_deployment_deployment_edit_form',
    'wetkit_deployment_queue_edit_form',
  );
  if (in_array($form_id, $deployment_types)) {
    // Create General Settings Fieldset.
    $form['general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['general_settings']['override_title'] = $form['override_title'];
    $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
    $form['general_settings']['override_title_text'] = $form['override_title_text'];
    $form['general_settings']['types'] = $form['types'];

    // Unset some Form Variables.
    unset($form['override_title']);
    unset($form['override_title_markup']);
    unset($form['override_title_text']);
    unset($form['types']);
  }
}

/**
 * Implements hook_entity_dependencies().
 */
function wetkit_deployment_entity_dependencies($entity, $entity_type) {
  if ($entity_type == 'node') {
    $dependencies = array();
    $body = field_get_items('node', $entity, 'body');
    if ($body) {
      preg_match(MEDIA_TOKEN_REGEX, $body[0]['value'], $matches);
      if (isset($matches[0])) {
        $tag = $matches[0];
        $tag = str_replace(array('[[', ']]'), '', $tag);
        $tag_info = drupal_json_decode($tag);
        $dependencies[] = array('type' => 'file', 'id' => $tag_info['fid']);
      }
    }
    return $dependencies;
  }
}

/**
 * Implements hook_quicktabs_tabstyles().
 */
function wetkit_deployment_quicktabs_tabstyles() {
  $path = drupal_get_path('module', 'wetkit_deployment');
  return array(
    $path . '/plugins/quicktabs_styles/wetkit_tabs/wetkit_tabs.css' => t('WetKit Tabs'),
  );
}

/**
 * Implements hook_action_info().
 */
function wetkit_deployment_action_info() {
  $actions = array();
  $actions['wetkit_deployment_action_add_content_to_managed_plan'] = array(
    'type' => 'node',
    'label' => t('Add content to staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_delete_content_from_managed_plan'] = array(
    'type' => 'node',
    'label' => t('Delete content from staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_add_bean_to_managed_plan'] = array(
    'type' => 'bean',
    'label' => t('Add bean to staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_delete_bean_from_managed_plan'] = array(
    'type' => 'bean',
    'label' => t('Delete bean from staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_add_file_to_managed_plan'] = array(
    'type' => 'file',
    'label' => t('Add file to staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_delete_file_from_managed_plan'] = array(
    'type' => 'file',
    'label' => t('Delete file from staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_add_term_to_managed_plan'] = array(
    'type' => 'taxonomy_term',
    'label' => t('Add term to staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_delete_term_from_managed_plan'] = array(
    'type' => 'taxonomy_term',
    'label' => t('Delete term from staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_add_user_to_managed_plan'] = array(
    'type' => 'user',
    'label' => t('Add user to staging area'),
    'configurable' => FALSE,
  );
  $actions['wetkit_deployment_action_delete_user_from_managed_plan'] = array(
    'type' => 'user',
    'label' => t('Delete user from staging area'),
    'configurable' => FALSE,
  );
  return $actions;
}

/**
 * Options callback for the deploy_plan data type.
 */
function wetkit_deployment_deploy_manager_plan_get_options($args = array()) {
  $default_args = array(
    'aggregator_plugin' => 'WetKitDeployAggregatorManaged',
  );
  $args = array_merge($default_args, $args);

  $plans = deploy_plan_load_all($args);
  $options = array();
  foreach ($plans as $plan_name => $info) {
    $options[$plan_name] = $info->title;
  }
  return $options;
}
