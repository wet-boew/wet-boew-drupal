<?php
/**
 * @file
 * Code for the wetkit_widgets module.
 */

include_once 'wetkit_widgets.features.inc';
include_once 'wetkit_widgets.plugins.inc';

/**
 * Implements hook_apps_app_info().
 */
function wetkit_widgets_apps_app_info() {
  return array(
    'configure form' => 'wetkit_widgets_configure_form',
  );
}

/**
 * Configuration Form for WetKit Magic.
 */
function wetkit_widgets_configure_form($form, &$form_state) {
  $form = array();

  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function wetkit_widgets_init() {

}

/**
 * Implements hook_ctools_plugin_directory().
 */
function wetkit_widgets_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Create default values on fieldable_panels_pane fields when appropriate.
 */
function wetkit_widgets_field_widget_form_alter(&$element, &$form_state, $context) {

}

/**
 * Implements hook_form_alter().
 */
function wetkit_widgets_form_alter(&$form, &$form_state, $form_id) {

}

/**
 * Implement the "Content Settings" fieldset in a pre-render.
 *
 * @see http://drupal.org/node/1567704
 */
function wetkit_widgets_fieldable_panel_pane_pre_render($element) {
  // Add a content settings fieldset.
  $element['content_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Settings'),
    '#weight' => 1,
  );

  // Add any remaining fields to the content settings fieldset.
  foreach ($element as $key => $value) {
    if (substr($key, 0, 6) == 'field_' || $key == 'body') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
    if (drupal_substr($key, 0, 8) == 'language') {
      $element['content_settings'][$key] = $value;
      unset($element[$key]);
    }
  }

  return $element;
}

/**
 * Implements hook_entity_info_alter().
 */
function wetkit_widgets_entity_info_alter(&$entity_info) {

  // Tabbed Interface.
  $entity_info['fieldable_panels_pane']['bundles']['tabbed_interface'] = array(
    'label' => t('Add tabbed interface'),
    'pane category' => t('WetKit'),
    'pane top level' => TRUE,
    'pane icon' => drupal_get_path('module', 'wetkit_widgets') . '/images/icon_tabbed_interface.png',
    'admin' => array(
      'path' => 'admin/structure/fieldable-panels-panes/manage/%fieldable_panels_panes_type',
      'bundle argument' => 4,
      'real path' => 'admin/structure/fieldable-panels-panes/manage/tabbed-interface',
      'access arguments' => array('administer fieldable panels panes'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_widgets_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'wetkit_widgets') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements hook_theme().
 */
function wetkit_widgets_theme($existing, $type, $theme, $path) {
  return array(
    'fieldable_panels_pane' => array(
      'render element' => 'elements',
      'template'  => 'templates/fieldable_panels_pane/wetkit-widgets-fieldable-panels-pane',
      'path' => drupal_get_path('module', 'wetkit_widgets'),
    ),
    'wetkit_widgets_file_video' => array(
      'variables' => array(
        'files' => array(),
        'controls' => TRUE,
        'autoplay' => FALSE,
        'loop' => FALSE,
        'muted' => FALSE,
        'width' => NULL,
        'height' => NULL,
      ),
      'file' => 'wetkit_widgets.theme.inc',
    ),
    'wetkit_tab_interface_view' => array(
      'variables' => array(
        'items' => NULL,
        'delta' => NULL,
        'settings' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_file_default_types().
 */
function wetkit_widgets_file_default_types() {
  $types = array();

  // WetKit Video.
  $types['wetkit_video'] = (object) array(
    'api_version' => 1,
    'type' => 'wetkit_video',
    'label' => t('WetKit Video'),
    'description' => t('A <em>WetKit Video</em> file is a moving visual recording using the WET video player.'),
    'mimetypes' => array(
      'video/mp4',
      'video/ogg',
    ),
    'streams' => array(
      'public',
    ),
  );

  return $types;
}
