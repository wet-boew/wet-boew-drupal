<?php
/**
 * @file
 * Metatag integration for the wetkit_metatag module.
 */

include_once 'wetkit_metatag.features.inc';

/**
 * Implements hook_apps_app_info().
 */
function wetkit_metatag_apps_app_info() {
  return array(
    'configure form' => 'wetkit_metatag_configure_form',
  );
}

/**
 * Configuration Form for WetKit Metatags.
 */
function wetkit_metatag_configure_form($form, &$form_state) {
  $form = array();

  $form['wetkit_metatag'] = array(
    '#title' => 'Metatag Settings',
    '#type'  => 'fieldset',
    '#collapsible' => 'true',
  );

  $form['wetkit_metatag']['wetkit_metatag_creator'] = array(
    '#title' => t('Metatags for Creator'),
    '#type' => t('textfield'),
    '#maxlength' => 255,
    '#size' => 50,
    '#default_value' => variable_get('wetkit_metatag_creator'),
    '#description' => t('Metatags for Creator'),
  );

  $form['wetkit_metatag']['wetkit_metatag_subject_scheme'] = array(
    '#title' => t('Metatag Attribute for Subject (Scheme)'),
    '#type' => t('textfield'),
    '#maxlength' => 255,
    '#size' => 50,
    '#default_value' => variable_get('wetkit_metatag_subject_scheme'),
    '#description' => t('Metatag Attribute for Subject (Scheme)'),
  );

  $form['#submit'][] = 'wetkit_metatag_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Metatag configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_metatag_configure_form_submit($form, &$form_state) {
  // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();

  registry_rebuild();
  drupal_clear_css_cache();
  drupal_clear_js_cache();

  // Rebuild the theme data. Note that the module data is rebuilt above, as
  // part of registry_rebuild().
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  // Don't clear cache_form - in-progress form submissions may break.
  // Ordered so clearing the page cache will always be the last action.
  $core = array(
    'cache',
    'cache_path',
    'cache_filter',
    'cache_bootstrap',
    'cache_page',
  );
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }
}

/**
 * Implements hook_theme().
 */
function wetkit_metatag_theme() {
  $info['wetkit_metatag'] = array(
    'render element' => 'element',
  );

  return $info;
}

/**
 * Unset metatags in the header that are no longer needed in HTML5.
 */
function wetkit_metatag_html_head_alter(&$head_elements) {
  unset($head_elements['metatag_description']);
}

/**
 * Theme callback for a Dublin Core meta tag.
 */
function theme_wetkit_metatag($variables) {
  $element = &$variables['element'];
  element_set_attributes($element, array(
    '#name' => 'name',
    '#schema' => 'title',
    '#value' => 'content')
  );
  unset($element['#value']);
  return theme('html_tag', $variables);
}

/**
 * Implements hook_form_alter().
 */
function wetkit_metatag_form_alter(&$form, &$form_state, $form_id) {
  // Only include on node add/edit forms.
  if (!empty($form['#node_edit_form'])) {

    // Create a fieldset that will be included in the vertical tab.
    $form['vertical_tabs_wetkit'] = array(
      '#type' => 'fieldset',
      '#title' => t('WetKit Dublin Core'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#weight' => 99,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'wetkit_metatag') . '/js/vertical_tabs_metatag.js',
        ),
      ),
    );

    // Create a fieldset that will be included in the vertical tab.
    $form['vertical_tabs_metatags_advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Meta tags (Advanced)'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#weight' => 99,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'wetkit_metatag') . '/js/vertical_tabs_metatag.js',
        ),
      ),
    );

    // Move custom metatags into different Vertical Tabs.
    $form['vertical_tabs_wetkit']['dublin-core'] = $form['metatags']['dublin-core'];
    $form['vertical_tabs_metatags_advanced']['advanced'] = $form['metatags']['advanced'];

    // Unset form content that is not needed.
    unset($form['vertical_tabs_wetkit']['dublin-core']['#type']);
    unset($form['vertical_tabs_metatags_advanced']['advanced']['#type']);
    unset($form['metatags']['advanced']);
    unset($form['metatags']['dublin-core']);
    unset($form['metatags']['abstract']);
    unset($form['metatags']['keywords']);
  }
}
