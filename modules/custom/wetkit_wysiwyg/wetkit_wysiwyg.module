<?php
/**
 * @file
 * wetkit_wysiwyg.module
 */

include_once 'wetkit_wysiwyg.features.inc';
include_once 'wetkit_wysiwyg.features.wysiwyg.inc';

/**
 * Implements hook_apps_app_info().
 */
function wetkit_wysiwyg_apps_app_info() {
  return array(
    'configure form' => 'wetkit_wysiwyg_configure_form',
  );
}

/**
 * Configuration Form for WetKit WYSIWYG.
 */
function wetkit_wysiwyg_configure_form($form, &$form_state) {
  $form = array();
  // Documentation.
  $form['wetkit_wysiwyg'] = array(
    '#title' => 'WYSIWYG Settings',
    '#type'  => 'fieldset',
    '#collapsible' => 'true',
  );
  $form['wetkit_wysiwyg']['wetkit_wysiwyg_show_format_details'] = array(
    '#title' => t('Show Text Formatter Details'),
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '1' => 'Show',
      '0' => 'Do Not Show',
    ),
    '#default_value' => variable_get('wetkit_wysiwyg_show_format_details', 0),
    '#description' => t('Do you want WetKit to show the help text and text format guidelines?'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function wetkit_wysiwyg_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function wetkit_wysiwyg_wysiwyg_plugin($editor) {
  switch ($editor) {
    case 'tinymce':
      return array(
        'spellchecker' => array(
          'internal' => TRUE,
          'buttons' => array(
            'spellchecker' => t('Spell Check'),
          ),
          'url' => 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/spellchecker',
          'load' => TRUE,
        ),
        'inlinepopups' => array(
          'internal' => TRUE,
          'url' => 'http://www.tinymce.com/wiki.php/Plugin:inlinepopups',
          'load' => TRUE,
        ),
        'wetkitcleanup' => array(
          'path' => drupal_get_path('module', 'wetkit_wysiwyg') . '/plugins/wysiwyg/wetkitcleanup',
          'filename' => 'editor_plugin.js',
          'buttons' => array(
            'wetkitcleanup' => t('WetKit Cleanup Tools'),
          ),
          'extended_valid_elements' => array(
            'div[!class|!id|!style|rel],-span[!class|!lang],a[id|name|class|href|rel|title]',
          ),
          'extensions' => array(
            'wetkitcleanup' => t('WetKit Cleanup Tools'),
          ),
          'load' => TRUE,
        ),
      );
  }
}


/**
 * Implements hook_element_info_alter().
 */
function wetkit_wysiwyg_element_info_alter(&$type) {
  // Change text format processing on elements to our version.
  if (isset($type['text_format'])) {
    $type['text_format']['#process'][] = 'wetkit_wysiwyg_filter_process_format';
  }
}

/**
 * Callback for processing the text_format element.
 */
function wetkit_wysiwyg_filter_process_format($element) {

  // Do not auto submit the form due to changes of the filter.
  $element['format']['format']['#attributes']['class'][] = 'ctools-auto-submit-exclude';

  // Do not show the guidelines and help text for text formatters.
  // Also format this all a bit different so that it looks right.
  if (!variable_get('wetkit_wysiwyg_show_format_details', FALSE)) {
    $element['format']['#weight'] = 1;
    $element['format']['#prefix'] = '<div class="format-toggle">';
    $element['format']['#suffix'] = '</div><div class="clearfix"></div>';
    unset($element['format']['#type']);
    $element['format']['format']['#title'] = 'Editor: ';
    $element['format']['help']['#access'] = FALSE;
    $element['format']['guidelines']['#access'] = FALSE;
  }

  return $element;
}

/**
 * Implements hook_module_implements_alter().
 */
function wetkit_wysiwyg_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'wysiwyg_editor_settings_alter') {
    $group = $implementations['wetkit_wysiwyg'];
    unset($implementations['wetkit_wysiwyg']);
    $implementations['wetkit_wysiwyg'] = $group;
  }
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function wetkit_wysiwyg_wysiwyg_editor_settings_alter(&$settings, $context) {

  // Change interface language for tinymce based on context.
  if (isset($settings['language'])) {
    global $language;
    if ($settings['language'] != $language->language) {
      // Check existence of TinyMCE core language file.
      if (file_exists($context['editor']['library path'] . '/langs/' . $language->language . '.js')) {
        // Check existence of TinyMCE theme language file.
        if (file_exists($context['editor']['library path'] . '/themes/' . $context['theme'] . '/langs/' . $language->language . '.js')) {
          $settings['language'] = $language->language;
        }
      }
      // Check existence of CKEditor which includes language pack by default.
      if ($context['editor']['name'] == 'ckeditor') {
        $settings['language'] = $language->language;
      }
    }
  }

  switch ($context['editor']['name']) {
    case 'ckeditor':
      // Intranet Theme.
      $wet_theme = '';
      if ((variable_get('wetkit_wetboew_theme', 0) == 1)) {
        $wet_theme = 'theme-base';
      }
      // Base Theme.
      elseif ((variable_get('wetkit_wetboew_theme', 0) == 2)) {
        $wet_theme = 'theme-gcwu-intranet';
      }
      // Internet Theme.
      else {
        $wet_theme = 'theme-gcwu-fegc';
      }

      // Start Up Settings
      $settings['docType'] = '<!DOCTYPE html>';
      $settings['startupMode'] = 'wysiwyg';

      // Set CSS Files that absolutely need to be rendered inside the WYSIWYG
      // leaves the interface in the frontend to be used for additional styles.
      $settings['contentsCss'] = array(
        libraries_get_path('wet-boew', TRUE) . '/dist/grids/css/util-min.css',
        libraries_get_path('wet-boew', TRUE) . '/dist/js/css/pe-ap-min.css',
        libraries_get_path('wet-boew', TRUE) . '/dist/' . $wet_theme . '/css/theme-min.css',
        drupal_get_path('module', 'wetkit_wysiwyg') . '/css/wetkit-wysiwyg.css',
      );

      // Allow extra elements for Media module
      // See - http://drupal.org/node/1963270
      //$settings['extraAllowedContent'] = array(
      //  'img[src,title,alt,style,width,height,class,hspace,vspace,view_mode,format,fid]',
      //  'area[href,title,alt,shape,coords]',
      //  'map[name,id,title]',
      //);
      $settings['allowedContent'] = TRUE;

      // Editor Configuration.
      $settings['emailProtection'] = 'encode';
      $settings['find_highlight'] = array(
        'element' => 'span',
        'styles' => array(
          'background-color' => '#ff0',
          'color' => '#00f',
        ),
      );
      $settings['justifyClasses'] = array(
        'align-left',
        'align-center',
        'align-right',
      );
      $settings['resize_enabled'] = TRUE;

      // Toolbar Configuration.
      $settings['toolbarCanCollapse'] = TRUE;
      $settings['toolbarStartupExpanded'] = TRUE;

      // Startup Outline Blocks
      $settings['startupOutlineBlocks'] = FALSE;
   
      // On Bean pages lets make this smaller.
      if (arg(0)=='block' && is_string(arg(1))) {
        $settings['height'] = 200;
      }
      else {
        $settings['height'] = 375;
      }

      // Enable SCAYT by default.
      $settings['scayt_autoStartup'] = FALSE;
      $settings['scayt_maxSuggestions'] = 5;
      $settings['scayt_moreSuggestions'] = 'on';
      $settings['scayt_sLang'] = ($settings['language'] == 'fr') ? 'fr_CA' : 'en_CA';
      break;

    case 'tinymce':
      // Internet Theme.
      $wet_theme = '';
      if ((variable_get('wetkit_wetboew_theme', 0) == 1)) {
        $wet_theme = 'theme-gcwu-fegc';
      }
      // Intranet Theme.
      elseif ((variable_get('wetkit_wetboew_theme', 0) == 2)) {
        $wet_theme = 'theme-gcwu-intranet';
      }
      // Base Theme.
      elseif ((variable_get('wetkit_wetboew_theme', 0) == 3)) {
        $wet_theme = 'theme-base';
      }
      // WET Theme.
      else {
        $wet_theme = 'theme-wet-boew';
      }

      // Set CSS Files that absolutely need to be rendered inside the WYSIWYG
      // leaves the interface in the frontend to be used for additional styles.
      $settings['content_css'] .= ',' .
      libraries_get_path('wet-boew', TRUE) . '/dist/grids/css/util-min.css' . ',' .
      libraries_get_path('wet-boew', TRUE) . '/dist/js/css/pe-ap-min.css' . ',' .
      libraries_get_path('wet-boew', TRUE) . '/dist/' . $wet_theme . '/css/theme-min.css';

      // Schema is HTML5 instead of default HTML4.
      $settings['schema'] = 'html5';

      // Preserve whitespace such as tabs and spaces.
      $settings['preformatted'] = TRUE;

      // End container block element when pressing enter inside an empty block.
      $settings['end_container_on_empty_block'] = TRUE;

      // HTML5 formats.
      $settings['style_formats'] = array(
        array('title' => 'p', 'block' => 'p'),
        array('title' => 'div', 'block' => 'div'),
        array('title' => 'pre', 'block' => 'pre'),
        array(
          'title' => 'section',
          'block' => 'section',
          'wrapper' => TRUE,
          'merge_siblings' => FALSE,
        ),
        array(
          'title' => 'article',
          'block' => 'article',
          'wrapper' => TRUE,
          'merge_siblings' => FALSE,
        ),
        array(
          'title' => 'blockquote',
          'block' => 'blockquote',
          'wrapper' => TRUE,
        ),
        array('title' => 'hgroup', 'block' => 'hgroup', 'wrapper' => TRUE),
        array('title' => 'aside', 'block' => 'aside', 'wrapper' => TRUE),
        array('title' => 'figure', 'block' => 'figure', 'wrapper' => TRUE),
      );

      // Define the skin to use.
      $settings['skin'] = 'cirkuit';

      // Define the spellchecking settings.
      $settings['spellchecker_languages'] = ($settings['language'] == 'fr') ? '+French=fr' : '+English=en';

      // Process a default order for the WYSIWYG.
      $enabled_buttons = preg_split('/,/', $settings['theme_advanced_buttons1']);
      $default_buttons = array(
        'bold',
        'italic',
        'underline',
        'strikethrough',
        '|',
        'bullist',
        'numlist',
        'blockquote',
        '|',
        'justifyleft',
        'justifycenter',
        'justifyright',
        '|',
        'indent',
        'outdent',
        '|',
        'linkit',
        'unlink',
        '|',
        'fullscreen',
        'spellchecker',
        'media',
        'captionfilter',
        'PAGEBREAK',
        'wetkitcleanup',
        '|',
        'template',
        '|',
        'formatselect',
        '|',
        'styleselect',
        '|',
        'justifyfull',
        '|',
        'forecolor',
        '|',
        'pastetext',
        'pasteword',
        'removeformat',
        'break',
        '|',
        'charmap',
        '|',
        'undo',
        'redo',
      );
      foreach ($default_buttons as $button) {
        if (in_array($button, $enabled_buttons)) {
          unset($enabled_buttons[array_search($button, $enabled_buttons)]);
        }
        elseif ($button != '|' && $button != 'PAGEBREAK') {
          unset($default_buttons[array_search($button, $default_buttons)]);
        }
      }

      // Define the final button row settings.
      $default_buttons_list = preg_split('/,PAGEBREAK,/', implode(',', $default_buttons));
      $settings['theme_advanced_buttons1'] = $default_buttons_list[0];
      $settings['theme_advanced_buttons2'] = $default_buttons_list[1];
      $settings['theme_advanced_buttons3'] = (count($enabled_buttons) > 0) ? implode(',', $enabled_buttons) : NULL;

      // Enable the inlinepopups and modal settings.
      $settings['plugins'] .= ',inlinepopups';
      $settings['dialog_type'] = 'modal';

      // Allow extra elements for Media module
      // See - http://drupal.org/node/1835826
      if (empty($settings['extended_valid_elements'])) {
        $settings['extended_valid_elements'] = 'img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]';
      }
      else {
        $settings['extended_valid_elements'] = array_merge(explode(',', $settings['extended_valid_elements']), array('img[!src|title|alt|style|width|height|class|hspace|vspace|view_mode|format|fid]'));

        // When adding new elements to $settings['extended_valid_elements'], make sure
        // that we're merging, and not overwriting.
        $settings_array = array();
        foreach($settings['extended_valid_elements'] as $tag) {
          list($tag, $allowed_attributes) = explode('[', $tag);
          $allowed_attributes = explode('|', trim($allowed_attributes, ']'));
          foreach($allowed_attributes as $key => $attribute) {
            $settings_array[$tag][$attribute] = $attribute;
          }
        }
        $valid_elements = array();
        foreach ($settings_array as $tag => $allowed_attributes) {
          $attributes = in_array('*', $allowed_attributes) ? '*' : implode('|', $allowed_attributes);
          $valid_elements[] = $tag . '[' . $attributes . ']';
        }
        $settings['extended_valid_elements'] = implode(',', $valid_elements);
      }
      break;

    case 'markitup':
      // Load the appropriate CSS and JS.
      drupal_add_css($context['editor']['library path'] . '/markitup/sets/html/style.css');
      drupal_add_js($context['editor']['library path'] . '/markitup/sets/html/set.js');

      // Defin the new header buttons.
      $header_buttons = array(
        'header-begin' => array(
          'className' => 'markItUpSeparator',
        ),
        'h1' => array(
          'name' => t('Heading 1'),
          'className' => 'markitup-h1',
          'key' => '1',
          'openWith' => '<h1(!( class="[![Class]!]")!)>',
          'closeWith' => '</h1>',
          'placeHolder' => 'Your title here...',
        ),
        'h2' => array(
          'name' => t('Heading 2'),
          'className' => 'markitup-h2',
          'key' => '2',
          'openWith' => '<h2(!( class="[![Class]!]")!)>',
          'closeWith' => '</h2>',
          'placeHolder' => 'Your title here...',
        ),
        'h3' => array(
          'name' => t('Heading 3'),
          'className' => 'markitup-h3',
          'key' => '3',
          'openWith' => '<h3(!( class="[![Class]!]")!)>',
          'closeWith' => '</h3>',
          'placeHolder' => 'Your title here...',
        ),
        'h4' => array(
          'name' => t('Heading 4'),
          'className' => 'markitup-h4',
          'key' => '4',
          'openWith' => '<h4(!( class="[![Class]!]")!)>',
          'closeWith' => '</h4>',
          'placeHolder' => 'Your title here...',
        ),
        'paragraph' => array(
          'name' => t('Paragraph'),
          'className' => 'markitup-paragraph',
          'key' => 'p',
          'openWith' => '<p(!( class="[![Class]!]")!)>',
          'closeWith' => '</p>',
        ),
        'header-end' => array(
          'className' => 'markItUpSeparator',
        ),
      );

      // Define the list styles.
      $list_styles = array(
        'list-bullet' => array(
          'name' => t('Unordered List'),
          'className' => 'markitup-list-bullet',
          'openWith' => "<ul>\n",
          'closeWith' => '</ul>',
        ),
        'list-numeric' => array(
          'name' => t('Ordered List'),
          'className' => 'markitup-list-numeric',
          'openWith' => "<ol>\n",
          'closeWith' => '</ol>',
        ),
      );

      // Add the header buttons to the end.
      foreach ($header_buttons as $tag => $details) {
        $settings['markupSet'][$tag] = $details;
        $context['profile']->settings['buttons']['html'][$tag] = 1;
      }

      // Add the list styles to the end.
      foreach ($list_styles as $tag => $details) {
        $settings['markupSet'][$tag] = $details;
        $context['profile']->settings['buttons']['html'][$tag] = 1;
      }
      break;
  }
}
