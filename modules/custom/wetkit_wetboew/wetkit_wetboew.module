<?php
/**
 * @file
 * Code for the wetkit_wetboew feature.
 */

include_once('wetkit_wetboew.block.inc');
include_once('wetkit_wetboew.features.inc');
include_once('wetkit_wetboew.menu_wetkit_load.inc');
include_once('views/wetkit_wetboew.admin_content_view.inc');
include_once('theme/theme.inc');

/**
 * Implements hook_menu_edit_item_alter().
 */
function wetkit_wetboew_page_alter(&$page) {
  // Hide Toolbar for those who can access the Admin Menu.
  if (user_access('access administration menu') && !empty($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#access'] = FALSE;
  }
}

/**
 * Implements hook_menu_edit_item_alter().
 */
function wetkit_wetboew_form_menu_edit_item_alter(&$form, &$form_state) {
  // Some menu items have a pre-defined path which cannot be modified hence no default_value
  if (isset($form['link_path']['#default_value'])) {
    $default_value = $form['link_path']['#default_value'];

    if (preg_match('/^<nolink>\/[0-9]+$/', $default_value)) {
      $default_value = '<nolink>';
    }

    $form['link_path']['#default_value'] = $default_value;
    $form['link_path']['#description'] .=  ' ' . t('Enter "%nolink" to generate non-linkable item', array('%nolink' => '<nolink>'));
  }
}

/**
 * Implements hook_menu().
 */
function wetkit_wetboew_menu() {

  // Add an dummy menu item
  $items['<nolink>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Add an dummy menu item
  $items['<noitem>'] = array(
    'page callback' => 'drupal_not_found',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Add an administration section for WetKit settings
  $items['admin/panopoly/wetkit_settings'] = array(
    'title' => 'WetKit Settings',
    'description' => 'Configuration related to WetKit',
    'position' => 'left',
    'weight' => -50,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Add settings pages for WetKit and WetKit Apps
  foreach (module_list() as $module) {
    $app_info = module_invoke($module, 'apps_app_info');
    if (!empty($app_info) && !empty($app_info['configure form'])) {
      $module_info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
      if (!empty($module_info['package']) && $module_info['package'] == 'WetKit') {
        $items['admin/panopoly/wetkit_settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      }
      elseif (!empty($module_info['package']) && $module_info['package'] == 'WetKit Apps') {
        $items['admin/panopoly/wetkit_app_settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      }
    }
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Remember that hook_menu_alter() only runs at menu_rebuild() time, not every
 * time the page is built, so this typically happens only at cache clear time.
 *
 * @param $items
 *   The complete list of menu router items ready to be written to the
 *   menu_router table.
 */
function wetkit_wetboew_menu_alter(&$items) {
  if (!empty($items['admin/panopoly'])) {
    $items['admin/panopoly']['title'] = 'WetKit';
  }
  if (!empty($items['admin/workbench'])) {
    $items['admin/workbench']['title'] = 'Workbench';
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param type $form
 *   Nested array of form elements that comprise the form.
 * @param type $form_state
 *   A keyed array containing the current state of the form.
 * @param type $form_id
 *   String representing the name of the form itself.
 */
function wetkit_wetboew_form_alter(&$form, &$form_state, $form_id) {
  // Move the featured field into publishing options
  if (!empty($form['field_featured_status'])) {
    $form['options']['field_featured_status'] = $form['field_featured_status'];
    //TODO: Upstream this fix to Panopoly
    $form['field_featured_status'] = array('#language' => NULL);
  }

  if (!empty($form['field_archived_content'])) {
    $form['options']['field_archived_content'] = $form['field_archived_content'];
    //TODO: Upstream this fix to Panopoly
    $form['field_archived_content'] = array('#language' => NULL);
  }

  // Remove the description from the shared widget
  if (!empty($form['field_share_widget'])) {
    $form['options']['field_share_widget'] = $form['field_share_widget'];
    $form['options']['field_share_widget']['#weight'] = '0';
    //TODO: Upstream this fix to Panopoly
    $form['field_share_widget'] = array('#language' => NULL);
  }

  // Create the General Settings Fieldset
  if ($form_id == 'ctools_block_content_type_edit_form') {
    // Create General Settings Fieldset
    $form['general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['general_settings']['override_title'] = $form['override_title'];
    $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
    $form['general_settings']['override_title_text'] = $form['override_title_text'];

    // Unset some Form Variables
    unset($form['override_title']);
    unset($form['override_title_markup']);
    unset($form['override_title_text']);
  }
}

/**
 * Implements hook_apps_app_info().
 */
function wetkit_wetboew_apps_app_info() {
  return array(
    'configure form' => 'wetkit_wetboew_configure_form',
  );
}

/**
 * Configuration Form for WetKit Magic
 *
 * @param type $form
 *   Nested array of form elements that comprise the form.
 * @param type $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_wetboew_configure_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'system') . '/system.js');

  $form = array();

  $form['wetkit_wetboew'] = array(
    '#type' => 'fieldset',
    '#title' => t('WetKit Theme Selection'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['wetkit_wetboew']['wetkit_wetboew_theme'] = array(
    '#type' => 'select',
    '#title' => t('Please choose the appropriate WET theme.'),
    '#options' => array(
      0 => t('Internet'),
      1 => t('Intranet'),
      2 => t('Base Theme'),
    ),
    '#default_value' => variable_get('wetkit_wetboew_theme', 0),
    '#description' => t('This will change the Drupal theme by adding custom css and logic for various WET based themes'),
  );

  $form['#submit'][] = 'wetkit_wetboew_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Web Usability configuration page.
 *
 * @param type $form
 *   Nested array of form elements that comprise the form.
 * @param type $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_wetboew_configure_form_submit($form, &$form_state) {
  // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();

  registry_rebuild();
  drupal_clear_css_cache();
  drupal_clear_js_cache();

  // Rebuild the theme data. Note that the module data is rebuilt above, as
  // part of registry_rebuild().
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  // Don't clear cache_form - in-progress form submissions may break.
  // Ordered so clearing the page cache will always be the last action.
  $core = array('cache', 'cache_path', 'cache_filter', 'cache_bootstrap', 'cache_page');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }
}

/**
 * Implements hook_css_alter().
 *
 * @param string $css
 *   The CSS Files to alter and be added or replaced
 */
function wetkit_wetboew_css_alter(&$css) {
  // Installs the jquery.ui themeroller theme to the theme.
  if (isset($css['misc/ui/jquery.ui.theme.css']) && (user_is_logged_in())) {
    $css['misc/ui/jquery.ui.theme.css']['data'] = drupal_get_path('module', 'panopoly_core') . '/css/panopooly-jquery-ui-theme.css';
  }
  else {
    unset($css['misc/ui/jquery.ui.theme.css']);
  }

  if (isset($css['misc/ui/jquery.ui.dialog.css'])) {
    unset($css['misc/ui/jquery.ui.dialog.css']);
  }

  if (isset($css['misc/ui/jquery.ui.tabs.css'])) {
    unset($css['misc/ui/jquery.ui.tabs.css']);
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * @param string $variables
 *   The variables array to be rendered or modified
 */
function wetkit_wetboew_preprocess_status_messages(&$variables) {
  global $theme;
  if ($theme == 'wetkit_adaptivetheme') {
    $variables['theme_hook_suggestions'][] = 'wetkit_wetboew_status_messages';
  }
}

/**
 * Implements hook_preprocess_tablefield_view().
 *
 * @param string $variables
 *   The variables array to be rendered or modified
 */
function wetkit_wetboew_preprocess_tablefield_view(&$variables) {
  $variables['theme_hook_suggestions'][] = 'wetkit_wetboew_tablefield_view';
}

/**
 * Implements hook_theme().
 *
 * @param type $existing
 *    An array of existing implementations that may be used to override.
 * @param type $type
 *   Whether a theme, module, etc. is being processed.
 * @param type $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param type $path
 *   The directory path of the theme or module, so doesn't need to be looked up.
 * @return type
 *   An associative array of theme hook information.
 */
function wetkit_wetboew_theme($existing, $type, $theme, $path) {
  return array(
    'wetkit_wetboew_status_messages' => array(
      'render element' => 'element',
      'file' => 'theme/theme.inc',
    ),
    'wetkit_wetboew_tablefield_view' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'delta' => NULL,
      ),
    ),
  );
}

/**
 * Wrapper function around filter_xss() with some additions.
 *
 * @param type $string
 *   String to be parsed.
 * @param type $allowed_tags
 *   Allowed tags to be included when parsing the string.
 * @return type
 *  Return the modified string.
 */
function wetkit_wetboew_filter_xss($string, $allowed_tags = array('a', 'em', 'strong', 'cite', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'br')) {
  return filter_xss($string, $allowed_tags);
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * @param type $module
 *   The system name of the module owning the plugin type.
 * @param type $plugin
 *   The name of the plugin type for which a base directory is being requested.
 * @return type
 *   The path where CTools' plugin system should search for plugin files.
 */
function wetkit_wetboew_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_init().
 */
function wetkit_wetboew_init() {
  //Set Flag
  if ((variable_get('wetkit_wetboew_load', 1) == 1)) {
    drupal_flush_all_caches();
    variable_set('wetkit_wetboew_load', 0);
  }
  //Set Documentation Text
  if ((variable_get('wetkit_wetboew_doc', 1) == 1)) {
    drupal_set_message(t('Thank you for installing the WxT-Drupal Variant for the Web Experience Toolkit. You may login at the following page: <a href="@login">User Login</a>', array('@login' => url('user'))), 'status');
    drupal_set_message(t('For more information please be sure to read the online <a href="@documentation">Documentation</a>', array('@documentation' => url('https://github.com/wet-boew/wet-boew-drupal/wiki'))), 'warning');
    variable_set('wetkit_wetboew_doc', 0);
  }

  //Only use WET-BOEW on Front End
  global $theme;
  global $base_theme_info;
  $wetkit_base_theme = FALSE;
  $themekey = 'theme-gcwu-fegc';

  foreach ($base_theme_info as $base) {
    if (!empty($base->name)) {
      if ($base->name == 'wetkit_adaptivetheme') {
        $wetkit_base_theme = TRUE;
      }
    }
  }

  if (($theme == 'wetkit_adaptivetheme')  || ($wetkit_base_theme == TRUE)) {
    //Add WET-BOEW Intranet Library using Libraries API
    $library = libraries_detect('wet-boew', NULL, 'intranet');
    if ((isset($library)) && !empty($library['variants']['intranet']['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew', 'intranet');
      $themekey = 'theme-gcwu-intranet';
    }
    //Add WET-BOEW Base Theme Library using Libraries API
    $library = libraries_detect('wet-boew', NULL, 'base_theme');
    if ((isset($library)) && !empty($library['variants']['base_theme']['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew', 'base_theme');
      $themekey = 'theme-base';
    }
    //Add WET-BOEW Default (Minified) Library using Libraries API
    $library = libraries_detect('wet-boew');
    if ((isset($library)) && !empty($library['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew');
      $themekey = 'theme-gcwu-fegc';
    }
  }
  drupal_add_css(drupal_get_path('module', 'wetkit_wetboew') . '/css/wetkit_wetboew.css', array('group' => CSS_THEME, 'every_page' => TRUE));

  $element = array(
    '#type' => 'markup',
    '#markup' => '<link rel="stylesheet" href="' . libraries_get_path('wet-boew', TRUE) . '/dist/' . $themekey . '/css/theme-ns-min.css" />',
    '#prefix' => "<noscript>",
    '#suffix' => "</noscript>\n",
    '#weight' => '999',
  );
  drupal_add_html_head($element, 'wetkit_wetboew_noscript');
}

/**
 * Implements hook_libraries_info().
 */
function wetkit_wetboew_libraries_info() {
 // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/wet-boew'.
  $libraries['wet-boew'] = array(
    'name' => 'WET-BOEW JS',
    'vendor url' => 'https://github.com/wet-boew/wet-boew',
    'download url' => 'https://github.com/wet-boew/wet-boew/downloads',
    'version' => '3.0',
    'files' => array(
      'css' => array(
        'dist/grids/css/util-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
        'dist/grids/css/util-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
        'dist/js/css/pe-ap-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
        'dist/js/css/pe-ap-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
        'dist/theme-gcwu-fegc/css/theme-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
        'dist/theme-gcwu-fegc/css/theme-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
      ),
      'js' => array(
        'dist/theme-gcwu-fegc/js/theme-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
        'dist/js/settings.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
        'dist/js/pe-ap-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
      ),
    ),
    // Optional: Specify alternative variants of the library, if available.
    'variants' => array(
      // All properties defined for 'base_theme' override top-level properties.
      'base_theme' => array(
        'files' => array(
          'css' => array(
            'dist/grids/css/util-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/grids/css/util-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
            'dist/js/css/pe-ap-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/js/css/pe-ap-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
            'dist/theme-base/css/theme-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/theme-base/css/theme-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
          ),
          'js' => array(
            'dist/theme-base/js/theme-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
            'dist/js/settings.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
            'dist/js/pe-ap-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
          ),
        ),
        'variant callback' => 'wetkit_wetboew_check_variant',
        'variant arguments' => array(
          'variant' => 'base-theme',
        ),
      ),
      // All properties defined for 'intranet' override top-level properties.
      'intranet' => array(
        'files' => array(
          'css' => array(
            'dist/grids/css/util-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/grids/css/util-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
            'dist/js/css/pe-ap-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/js/css/pe-ap-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
            'dist/theme-gcwu-intranet/css/theme-ie-min.css' => array('browsers' => array('IE' => 'lte IE 8', '!IE' => FALSE), 'group' => CSS_DEFAULT, 'every_page' => TRUE, 'preprocess' => FALSE, 'weight' => 5),
            'dist/theme-gcwu-intranet/css/theme-min.css' => array('browsers' => array('IE' => 'gt IE 8', '!IE' => TRUE), 'preprocess' => FALSE, 'weight' => 5),
          ),
          'js' => array(
            'dist/theme-gcwu-intranet/js/theme-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
            'dist/js/settings.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
            'dist/js/pe-ap-min.js' => array('preprocess' => FALSE, 'scope' => 'footer', 'weight' => 5),
          ),
        ),
        'variant callback' => 'wetkit_wetboew_check_variant',
        'variant arguments' => array(
          'variant' => 'intranet',
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements wetkit_wetboew_check_variant().
 *
 * @param type $libary
 *   The name of the library
 * @param type $variant
 *   The name of the variant for the specified library
 * @return boolean
 *  Whether or not the variant can be manipulated
 */
function wetkit_wetboew_check_variant($libary, $variant) {
  if ((variable_get('wetkit_wetboew_theme', 0) == 1) && ($variant == 'intranet')) {
    return TRUE;
  }
  elseif ((variable_get('wetkit_wetboew_theme', 0) == 2) && ($variant == 'base_theme')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_menu_block_blocks().
 */
function wetkit_wetboew_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'wetkit_menu_blocks-1' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'Mega Menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 1,
      'sort'        => 0,
    ),
    'wetkit_menu_blocks-2' => array(
      'menu_name'   => 'menu-wet-mid-footer',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'Footer Block',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 1,
      'sort'        => 0,
    ),
  );
}
