<?php
/**
 * @file
 * Code for the wetkit_wetboew feature.
 */

include_once 'libraries/wetkit_wetboew.libraries.inc';
include_once 'theme/wetkit_wetboew.theme.inc';
include_once 'wetkit_wetboew.menus.inc';

/**
 * Implements hook_init().
 */
function wetkit_wetboew_init() {
  // Only use WET-BOEW on Front End.
  global $theme;
  global $base_theme_info;
  $wetkit_base_theme = FALSE;
  $themekey = 'theme-gcwu-fegc';

  foreach ($base_theme_info as $base) {
    if (!empty($base->name)) {
      if ($base->name == 'wetkit_adaptivetheme') {
        $wetkit_base_theme = TRUE;
      }
    }
  }

  if (($theme == 'wetkit_adaptivetheme')  || ($wetkit_base_theme == TRUE)) {
    // Add WET-BOEW Intranet Library using Libraries API.
    $library = libraries_detect('wet-boew', NULL, 'intranet');
    if ((isset($library)) && !empty($library['variants']['intranet']['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew', 'intranet');
      $themekey = 'theme-gcwu-intranet';
    }
    // Add WET-BOEW Base Theme Library using Libraries API.
    $library = libraries_detect('wet-boew', NULL, 'base_theme');
    if ((isset($library)) && !empty($library['variants']['base_theme']['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew', 'base_theme');
      $themekey = 'theme-base';
    }
    // Add WET-BOEW Default (Minified) Library using Libraries API.
    $library = libraries_detect('wet-boew');
    if ((isset($library)) && !empty($library['installed'])) {
      // Do something with the library here.
      libraries_load('wet-boew');
      $themekey = 'theme-gcwu-fegc';
    }
  }

  // Solve some of the display inconsistencies between WET and Drupal.
  drupal_add_css(drupal_get_path('module', 'wetkit_wetboew') . '/css/wetkit_wetboew.css', array(
    'group' => CSS_THEME,
    'every_page' => TRUE,
  ));

  // Add the noscipt css that WET expects.
  $element = array(
    '#type' => 'markup',
    '#markup' => '<link rel="stylesheet" href="' . libraries_get_path('wet-boew', TRUE) . '/dist/' . $themekey . '/css/theme-ns-min.css" />',
    '#prefix' => "<noscript>",
    '#suffix' => "</noscript>\n",
    '#weight' => '999',
  );
  drupal_add_html_head($element, 'wetkit_wetboew_noscript');
}

/**
 * Implements hook_menu().
 */
function wetkit_wetboew_menu() {
  // Add settings pages for WetKit WETBOEW.
  foreach (module_list() as $module) {
    $app_info = module_invoke($module, 'apps_app_info');
    if (!empty($app_info) && !empty($app_info['configure form'])) {
      $module_info = drupal_parse_info_file(drupal_get_path('module', $module) . '/' . $module . '.info');
      if (!empty($module_info['package']) && $module_info['package'] == 'WetKit') {
        $items['admin/panopoly/wetkit_settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      }
      elseif (!empty($module_info['package']) && $module_info['package'] == 'WetKit Apps') {
        $items['admin/panopoly/wetkit_app_settings/' . $module] = array(
          'title' => $module_info['name'],
          'description' => 'This is the configuration screen for ' . $module_info['name'],
          'page callback' => 'drupal_get_form',
          'page arguments' => array($app_info['configure form']),
          'access arguments' => array('administer site configuration'),
        );
      }
    }
  }

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function wetkit_wetboew_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}


/**
 * Implements hook_apps_app_info().
 */
function wetkit_wetboew_apps_app_info() {
  return array(
    'configure form' => 'wetkit_wetboew_configure_form',
  );
}

/**
 * Configuration Form for WetKit Magic.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_wetboew_configure_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'system') . '/system.js');

  $form = array();

  $form['wetkit_wetboew'] = array(
    '#type' => 'fieldset',
    '#title' => t('WetKit Theme Selection'),
    '#collapsible' => TRUE,
  );

  $form['wetkit_wetboew']['wetkit_wetboew_theme'] = array(
    '#type' => 'select',
    '#title' => t('Please choose the appropriate WET theme.'),
    '#options' => array(
      0 => t('Internet'),
      1 => t('Intranet'),
      2 => t('Base Theme'),
    ),
    '#default_value' => variable_get('wetkit_wetboew_theme', 0),
    '#description' => t('This will change the Drupal theme by adding custom css and logic for various WET based themes'),
  );

  $form['wetkit_wetboew']['wetkit_wetboew_menus_description'] = array(
    '#markup' => '<p>' . t('Rebuild the Menus on the site using demo content.') . '</p>',
  );

  $form['wetkit_wetboew']['wetkit_wetboew_menus'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Default Menu(s)'),
    '#weight' => 19,
    '#submit' => array('wetkit_wetboew_menus_submit'),
  );

  $form['#submit'][] = 'wetkit_wetboew_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Web Usability configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_wetboew_menus_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Rebuild Default Menu(s)')) {
    if (module_exists('wetkit_wetboew')) {
      menu_delete_links('main-menu');
      _wetkit_wetboew_menu_megamenu_load();
    }
  }
}

/**
 * Handle submission of the WetKit Web Usability configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_wetboew_configure_form_submit($form, &$form_state) {
  // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();

  registry_rebuild();
  drupal_clear_css_cache();
  drupal_clear_js_cache();

  // Rebuild the theme data. Note that the module data is rebuilt above, as
  // part of registry_rebuild().
  system_rebuild_theme_data();
  drupal_theme_rebuild();

  // Don't clear cache_form - in-progress form submissions may break.
  // Ordered so clearing the page cache will always be the last action.
  $core = array(
    'cache',
    'cache_path',
    'cache_filter',
    'cache_bootstrap',
    'cache_page',
  );
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_wetboew_theme_registry_alter(&$theme_registry) {
  if (module_exists('total_control')) {
    $theme_registry['total_control_admin_table']['theme path'] = drupal_get_path('module', 'wetkit_wetboew');
    $theme_registry['total_control_admin_table']['file'] = drupal_get_path('module', 'wetkit_wetboew') . '/theme/wetkit_wetboew.theme.inc';
    $theme_registry['total_control_admin_table']['function'] = 'theme_wetkit_wetboew_admin_table';
  }
}

/**
 * Implements hook_css_alter().
 */
function wetkit_wetboew_css_alter(&$css) {
  // Installs the jquery.ui themeroller theme to the theme.
  if (isset($css['misc/ui/jquery.ui.theme.css']) && (user_is_logged_in())) {
    $url = parse_url(request_uri());
    if (strstr($url['path'], "/media/browser")) {
      $css['misc/ui/jquery.ui.theme.css']['data'] = drupal_get_path('module', 'panopoly_core') . '/css/panopooly-jquery-ui-theme.css';
    }
    else {
      $css['misc/ui/jquery.ui.theme.css']['data'] = drupal_get_path('module', 'panopoly_core') . '/css/panopooly-jquery-ui-theme.css';
    }
  }
  else {
    unset($css['misc/ui/jquery.ui.theme.css']);
  }

  if (isset($css['misc/ui/jquery.ui.dialog.css'])) {
    unset($css['misc/ui/jquery.ui.dialog.css']);
  }

  if (isset($css['misc/ui/jquery.ui.tabs.css'])) {
    unset($css['misc/ui/jquery.ui.tabs.css']);
  }
}


/**
 * Implements hook_theme().
 */
function wetkit_wetboew_theme($existing, $type, $theme, $path) {
  return array(
    'wetkit_wetboew_admin_table' => array(
      'render element' => 'element',
      'file' => 'theme/wetkit_wetboew.theme.inc',
    ),
    'wetkit_wetboew_status_messages' => array(
      'render element' => 'element',
      'file' => 'theme/wetkit_wetboew.theme.inc',
    ),
    'wetkit_wetboew_tablefield_view' => array(
      'file' => 'theme/wetkit_wetboew.theme.inc',
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'delta' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_status_messages().
 */
function wetkit_wetboew_preprocess_status_messages(&$variables) {
  global $theme;
  if ($theme == 'wetkit_adaptivetheme') {
    $variables['theme_hook_suggestions'][] = 'wetkit_wetboew_status_messages';
  }
}

/**
 * Implements hook_preprocess_tablefield_view().
 */
function wetkit_wetboew_preprocess_tablefield_view(&$variables) {
  $variables['theme_hook_suggestions'][] = 'wetkit_wetboew_tablefield_view';
}

/**
 * Implements hook_menu_block_blocks().
 */
function wetkit_wetboew_menu_block_blocks() {
  // The array key is the block delta used by menu block.
  return array(
    'wetkit_menu_blocks-1' => array(
      'menu_name'   => 'main-menu',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'Mega Menu',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 1,
      'sort'        => 0,
    ),
    'wetkit_menu_blocks-2' => array(
      'menu_name'   => 'menu-wet-mid-footer',
      'parent_mlid' => 0,
      'title_link'  => 0,
      'admin_title' => 'Footer Block',
      'level'       => 1,
      'follow'      => 0,
      'depth'       => 0,
      'expanded'    => 1,
      'sort'        => 0,
    ),
  );
}
