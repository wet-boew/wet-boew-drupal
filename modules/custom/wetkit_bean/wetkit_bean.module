<?php
/**
 * @file
 * Code for the WetKit Bean feature.
 */

include_once 'wetkit_bean.default_content.inc';
include_once 'wetkit_bean.features.inc';

/**
 * Implements hook_preprocess_hook().
 */
function wetkit_bean_preprocess_entity(&$variables) {
  $entity_type = $variables['entity_type'];
  if ($entity_type == 'bean') {
    $id = entity_id($variables['entity_type'], $variables['bean']);
    if ($id) {
      $variables['theme_hook_suggestions'][] = $variables['entity_type'] . '__' . preg_replace('/[^a-z0-9]/', '_', strtolower($id));
    }
  }
}

/**
 * Implements hook_apps_app_info().
 */
function wetkit_bean_apps_app_info() {
  return array(
    'configure form' => 'wetkit_bean_configure_form',
  );
}

/**
 * Configuration Form for WetKit WYSIWYG.
 */
function wetkit_bean_configure_form($form, &$form_state) {
  $form = array();

  $form['wetkit_bean'] = array(
    '#title' => 'Override Settings',
    '#type'  => 'fieldset',
    '#collapsible' => 'true',
  );

  $form['wetkit_bean']['rebuild_menu_description'] = array(
    '#markup' => '<p>' . t('Rebuild the beans on the site using demo content.') . '</p>',
  );

  $form['wetkit_bean']['rebuild_menu'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Default Bean(s)'),
    '#weight' => 19,
  );

  $form['#submit'][] = 'wetkit_bean_configure_form_submit';

  return system_settings_form($form);
}

/**
 * Handle submission of the WetKit Metatag configuration page.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 */
function wetkit_bean_configure_form_submit($form, &$form_state) {
  if ($form_state['values']['op'] == t('Rebuild Default Bean(s)')) {
    // Delete Beans if exist.
    wetkit_bean_delete_bean('Minister');
    wetkit_bean_delete_bean('Priorities');
    wetkit_bean_delete_bean('Stay-Connected');
    wetkit_bean_delete_bean('Videos');

    // Clear the bean cache so an anonymous user sees that the bean was deleted.
    bean_reset();

    // Recreate the default beans.
    _wetkit_bean_load();
  }
}

/**
 * Helper to manufacture a new Bean of a given type.
 *
 * @param string $bean_type
 *   The type of bean to create
 * @param string $label
 *   Admin label for the bean
 * @param string $description
 *   (optional) Admin description for the bean
 * @param string $title
 *   (optional) Block title for the bean
 * @param array $fields_en
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param array $fields_fr
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param string $view_mode
 *   (optional) The view mode. Defaults to 'default'.
 */
function wetkit_bean_save_bean($bean_type, $label, $description = '', $title = '', $fields_en = array(), $fields_fr = array(), $view_mode = 'default') {

  $bean = wetkit_bean_create_bean($bean_type, $label, $description, $title, $fields_en, $view_mode);

  // Set the default translation mapping.
  $translation = array(
    'translate' => 0,
    'status' => 1,
    'language' => 'fr',
    'source' => 'en',
  );
  $fields_translated = array();
  foreach ($fields_fr as $field_key => $field_value) {
    $fields_translated[$field_key] = array();
    $fields_translated[$field_key]['fr'] = $field_value;
  }
  $bean_translated = entity_translation_get_handler('bean', $bean);
  $bean_translated->setTranslation($translation, $fields_translated);
  bean_save($bean);

  drupal_set_message(t('Created a new bean "@label" of type <em>@bean_type</em>', array('@label' => $label, '@bean_type' => $bean_type)));
}

/**
 * Create a bean from configuration.
 *
 * Normally, you can use wetkit_bean_save_bean(), however this is useful if
 * you need to manipulate the bean before saving.
 *
 * @param string $bean_type
 *   The type of bean to create
 * @param string $label
 *   Admin label for the bean
 * @param string $description
 *   (optional) Admin description for the bean
 * @param string $title
 *   (optional) Block title for the bean
 * @param array $fields
 *   (optional) An array of fields to assign. This should resemble the ACTUAL
 *   field array, as it is literally transposed onto the bean, with the
 *   exception that the language key should be omitted.
 * @param string $view_mode
 *   (optional) The view mode. Defaults to 'default'.
 *
 * @return Bean
 *   a Bean entity
 */
function wetkit_bean_create_bean($bean_type, $label, $description = '', $title = '', $fields = array(), $view_mode = 'default') {
  $config = array(
    'label' => $label,
    'description' => $description,
    'title' => $title,
    'type' => $bean_type,
    'view_mode' => $view_mode,
    'is_new' => TRUE,
  );
  foreach ($fields as $field_key => $field_value) {
    $config[$field_key] = array();
    $config[$field_key]['en'] = $field_value;
  }
  $bean = bean_create($config);
  return $bean;
}

/**
 * Delete a bean from configuration.
 *
 * @param string $bean_name
 *   The type of bean to delete
 */
function wetkit_bean_delete_bean($bean_name) {
  $bean = bean_delta_load($bean_name);
  if (empty($bean)) {
    drupal_set_message(t('There is no bean found with delta @delta.', array('@delta' => $bean_name)));
    return;
  }
  bean_delete($bean);
}

/**
 * Implements hook_theme_registry_alter().
 */
function wetkit_bean_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'wetkit_bean') . '/theme';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements hook_form_alter().
 */
function wetkit_bean_form_alter(&$form, &$form_state, $form_id) {

  // Create the General Settings Fieldset.
  if ($form_id == 'bean_panels_bean_panels_content_type_edit_form') {
    // Create General Settings Fieldset.
    $form['general_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['general_settings']['override_title_markup'] = $form['override_title_markup'];
    $form['general_settings']['override_title'] = $form['override_title'];
    $form['general_settings']['override_title_text'] = $form['override_title_text'];
    $form['general_settings']['view_mode'] = $form['view_mode'];
    $form['general_settings']['bean_delta'] = $form['bean_delta'];

    // Unset some Form Variables.
    unset($form['override_title_markup']);
    unset($form['override_title']);
    unset($form['override_title_text']);
    unset($form['view_mode']);
    unset($form['bean_delta']);
  }
}
